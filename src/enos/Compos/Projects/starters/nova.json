{
  "root": {
    "modules": [
      {
        "pos": {
          "x": 60,
          "y": 254
        },
        "size": {
          "w": 200,
          "h": 40
        },
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "name": "Canvas Size Signal",
        "bg": "",
        "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  inputs,\n  outputs,\n  IO\n} = env\n/* esltint-enable */\nconsole.log(`========  ${box.name} is Ready.  ========`)\n// sender\n\nlet mounter = Resources.get('rootDOM');\nmounter.style.overflow = 'hidden';\n\nvar rect = mounter.getBoundingClientRect();\nIO.Input('onFrame', (v) => {\n  IO.Output('onFrame', v)\n})\n\nIO.Input('onFrame', () => {\n  rect = mounter.getBoundingClientRect();\n  IO.Output(['resize1','resize2','resize3'], { rect })\n})\n\n// this.onClean = () => {\n//   console.log('onClean', box.id)\n// }",
        "meta": [],
        "_id": "5c4f82d6226b990017249795",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4module_542035946732",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.926Z",
        "updated_at": "2019-01-08T11:20:16.926Z"
      },
      {
        "pos": {
          "x": 312,
          "y": 261
        },
        "size": {
          "w": 200,
          "h": 40
        },
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "name": "Timeline",
        "bg": "",
        "src": "/* global env */\n/* eslint-disable */\nlet {\nSignal,\nResources,\nsockets,\nbox,\nInput,\nOutput,\nOutputAll,\ngetMeta\n} = env\n/* esltint-enable */\nconsole.log(`========  ${box.name} is Ready.  ========`)\n// sender\n\nlet startTime = performance.now() / 1000\n\nInput('onFrame', (evt) => {\nlet timeMode = window.top[box.id + '-timeMode']\nlet progress = window.top[box.id + '-progress']\n// console.log(timeMode)\n\nlet timetracks = box.meta.filter(e => e.type === 'timeline-track')\ntimetracks.forEach((m, mi) => {\n  let time = 0\n  \n  if (timeMode === 'toEnv') {\n    time = (progress * m.value.totalTime)\n  } else {\n    time = evt.time / 1000 - startTime\n    if (time > m.value.totalTime) {\n      startTime = evt.time / 1000\n    }\n  }\n  \n  updateTimeValue({ time, mVal: m.value, totalTime: m.value.totalTime })\n})\n\n// tell UI\nif (timetracks.length > 0) {\n  let m = timetracks[0]\n  let time = performance.now() / 1000 - startTime\n  window.top.postMessage({ type: 'timeline', modID: box.id, time, totalTime: m.value.totalTime, progress: time / m.value.totalTime }, window.location.origin)\n}\n})\n\n\nlet updateTimeValue = ({ time, mVal, totalTime }) => {\nmVal.time = time\n\n// ---------------------------------\n// periods\n//  starting\nif (time >= mVal.start && time <= mVal.afterStart) {\n  let progress = (time - mVal.start) / (mVal.afterStart - mVal.start)\n  mVal.starting = progress\n  mVal.mode = 'starting'\n  mVal.var = progress\n}\n\n// periods\n// during\nif (time >= mVal.afterStart && time <= mVal.beforeEnd) {\n  let progress = (time - mVal.afterStart) / (mVal.beforeEnd - mVal.afterStart)\n  mVal.during = progress\n  mVal.mode = 'during'\n  mVal.var = 1.0\n}\n\n// periods\n//  leaving\nif (time >= mVal.beforeEnd && time <= mVal.end) {\n  let progress = 1.0 - (mVal.end - time) / (mVal.end - mVal.beforeEnd)\n  mVal.leaving = 1.0 - progress\n  mVal.mode = 'leaving'\n  mVal.var = 1.0 - progress\n}\n\n// ---------------------------------\n\n// overriders\n// before start\nif (time < mVal.start) {\n  let progress = 0\n  mVal.starting = 0\n  mVal.mode = 'beforeStart'\n  mVal.beforeStart = 0\n  mVal.var = 0\n}\n\n// after end\nif (time > mVal.end) {\n  let progress = 0\n  mVal.leaving = 0\n  mVal.afterEnd = 0\n  mVal.mode = 'afterEnd'\n  mVal.var = 0\n}\n\n// timebox mVal\n// timebox\nif (time >= mVal.start && time <= mVal.end) {\n  let progress = (time - mVal.start) / (mVal.end - mVal.start)\n  mVal.timebox = progress\n}\n\nmVal.tick = time / totalTime\nmVal.now = time\n};\n\nlet event = {\n$ready: true\n}\nlet toObject = (key) => {\nevent[key] = getMeta(key)\n}\nInput('onFrame', (v) => {\nbox.meta.filter(e => e.type === 'timeline-track').forEach((m, mi) => {\n  toObject(m.label);\n});\n\nOutputAll(event);\n});\n\n\n// this.onClean = () => {\n//   window.cancelAnimationFrame(rAFID);\n//   console.log('onClean', box.id)\n// }\n",
        "meta": [
          {
            "id": "_r1059487130",
            "label": "opacity",
            "type": "timeline-track",
            "value": {
              "start": 0.03749999999999931,
              "afterStart": 3.8858610188261293,
              "beforeEnd": 11.925000000000006,
              "end": 15.037500000000009,
              "totalTime": "15"
            }
          },
          {
            "id": "_r836406453",
            "label": "rate",
            "type": "timeline-track",
            "value": {
              "start": 0,
              "afterStart": 9.094285714285707,
              "beforeEnd": 12,
              "end": 15,
              "totalTime": "15"
            }
          },
          {
            "id": "_r844635908",
            "label": "strength",
            "type": "timeline-track",
            "value": {
              "start": 0,
              "afterStart": 2.479047619047627,
              "beforeEnd": 11.991964285714277,
              "end": 14.99196428571428,
              "totalTime": "15"
            }
          },
          {
            "id": "_r23648488",
            "label": "scaleX",
            "type": "timeline-track",
            "value": {
              "start": 0,
              "afterStart": 3,
              "beforeEnd": 12,
              "end": 15,
              "totalTime": 15
            }
          },
          {
            "id": "_r705983770",
            "label": "lovely",
            "type": "timeline-track",
            "value": {
              "start": 0,
              "afterStart": 3,
              "beforeEnd": 12,
              "end": 15,
              "totalTime": 15
            }
          }
        ],
        "_id": "5c4f82d6226b990017249796",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c24382d9adca6001780ced4module_624493095826",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.926Z",
        "updated_at": "2019-01-08T11:20:16.926Z"
      },
      {
        "pos": {
          "x": 209,
          "y": 147
        },
        "size": {
          "w": 200,
          "h": 40
        },
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "name": "Main Loop",
        "bg": "",
        "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  IO,\n  Input,\n  Output,\n  OutputAll\n} = env\n/* esltint-enable */\nconsole.log(`========  ${box.name} is Ready.  ========`)\n// sender\n\nlet startTime = performance.now();\n\nlet rAFID = 0\nlet event = {}\nlet rAF = () => {\n  rAFID = window.requestAnimationFrame(rAF);\n  \n  event.time = performance.now();\n  \n  OutputAll(event);\n}\nrAFID = window.requestAnimationFrame(rAF);\n\nInput('onClock', (evt) => {\n  OutputAll(evt);\n}, () => {\n  // cancenl the loop for the recorder\n  cancelAnimationFrame(rAFID);\n})\n\n// this.onClean = () => {\n//   window.cancelAnimationFrame(rAFID);\n//   console.log(`========  ${box.name} is Cleaned.  ========`)\n// }\n\n",
        "meta": [],
        "_id": "5c4f82d6226b990017249797",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4module_791055199420",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.926Z",
        "updated_at": "2019-01-08T11:20:16.926Z"
      },
      {
        "pos": {
          "x": 184,
          "y": 47
        },
        "size": {
          "w": 200,
          "h": 40
        },
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "name": "WebM Video Encoder ",
        "bg": "",
        "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  // inputs,\n  outputs,\n  \n  Input,\n  Output,\n  OutputAll,\n  getMeta\n} = env\n/* esltint-enable */\nconsole.log(`========  ${box.name} is Ready.  ========`)\nwindow.global = window;\n\nResources.js.need('whammy', [\n\t'https://cdn.jsdelivr.net/npm/whammy@0.0.1/whammy.min.js'\n]);\n\n\n\nResources.ensure(['whammy', 'renderer']).then(() => {\n  let encoder = new Whammy.Video(60)\n  let evt = {\n    time: 0,\n    total: getMeta('secondsToRecrod') * 1000,\n    encoder\n  }\n  \n  let canRecord = outputs[0].socket.to !== '' && !!outputs[0].socket.to;\n  \n  \n  let root = Resources.get('rootDOM');\n  \n  function shouldContinue (evt) {\n    return evt.time < evt.total\n  }\n  let span = document.createElement('a')\n  span.style.position = 'fixed';\n  span.style.top = '0px';\n  span.style.left = '0px';\n  span.style.width = '100%';\n  span.style.backgroundColor = 'white';\n  \n  let renderer = Resources.get('renderer');\n  \n  let tout = 0\n  function loop () {\n    Output('onClock', evt)  \n    evt.time += 1000 / 60\n    span.innerHTML = (evt.time / evt.total * 100).toFixed(2) + '% recorded'\n    if (shouldContinue(evt)) {\n      root.appendChild(span);\n      let link = renderer.domElement.toDataURL('image/webp');\n      evt.encoder.add(link)\n      tout = setTimeout(loop, 0)  \n    } else {\n      evt.encoder.compile(false, (webm) => {\n        console.log(webm)\n        let a = document.createElement('a')\n        a.href = URL.createObjectURL(webm)\n        a.download = 'video'\n        a.style.position = 'fixed';\n        a.style.top = '0px';\n        a.style.left = '0px';\n        a.style.width = '100%';\n        a.style.backgroundColor = 'white';\n        a.innerText = 'Donwload'\n        \n        console.log(root);\n        root.appendChild(a)\n      })\n    }\n  }\n  \n  //Resources.set('recordReady', encoder)\n  \n  if (canRecord) {\n    loop()\n  }\n  \n});\n\n// this.onClean = () => {\n//   console.log('onClean', box.id);\n//   Resources.ensure(['renderer']).then(() => {\n//     let renderer = Resources.get('renderer')\n//     Resources.get('rootDOM').removeChild(renderer.domElement)\n//   });\n// }\n",
        "meta": [
          {
            "id": "_r919847076",
            "label": "secondsToRecrod",
            "type": "range",
            "min": "0",
            "max": "15",
            "step": 0.1,
            "value": 15
          }
        ],
        "_id": "5c4f82d6226b99001724979a",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c4f6e9f226b990017249712module_882360011137",
        "created_at": "2019-01-28T21:30:16.221Z",
        "updated_at": "2019-01-28T21:30:16.221Z",
        "__v": 0
      },
      {
        "pos": {
          "x": 318,
          "y": 405
        },
        "size": {
          "w": 200,
          "h": 40
        },
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "name": "starFun",
        "bg": "",
        "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  inputs,\n  outputs,\n  getMeta,\n  IO,\n  Input,\n  Output,\n  OutputAll,\n} = env\n\nlet self = this\n\n\nResources.js.need('gpgpu', [\n  'https://threejs.org/examples/js/GPUComputationRenderer.js'\n]);\n\nResources.ensure(['threejs', 'effect-composer', 'gpgpu', 'renderer', 'scene', 'camera']).then(() => {\n  let scene = Resources.get('scene');\n  let camera = Resources.get('camera');\n  let renderer = Resources.get('renderer');\n  \n  camera.position.z = 10;\n  \n  \n    \n  function prepIndexer (texture, SIZE) {\n    var pixels = texture.image.data\n    var p = 0\n    let max = SIZE * SIZE\n    for (var j = 0; j < max; j++) {\n      pixels[p + 0] = j\n      pixels[p + 1] = j / (max)\n      pixels[p + 2] = SIZE\n      pixels[p + 3] = 1.0\n      p += 4\n    }\n  }\n  \n  var ticker = 0\n  let SIZE = 192\n  \n  var gpuCompute = new GPUComputationRenderer(SIZE, SIZE, renderer)\n  \n  var indexerTexture = gpuCompute.createTexture()\n  prepIndexer(indexerTexture, SIZE)\n  \n  var pingTarget = gpuCompute.createRenderTarget()\n  var pongTarget = gpuCompute.createRenderTarget()\n  \n  let pingMat, pongMat;\n  \n  let displayV = `uniform sampler2D posTex;\n  uniform float pointSize;\n  uniform sampler2D indexerTexture;\n  \n  varying vec2 vUv;\n  \n  uniform float time;\n  \n  void main() {\n      vec4 info = texture2D(indexerTexture, uv);\n  \n      vec4 pos = texture2D(posTex, uv);\n  \n      vec4 mvPosition = modelViewMatrix * vec4(pos.xyz, 1.0);\n      vec4 outputPos = projectionMatrix * mvPosition;\n  \n      // outputPos.y = outputPos.y + sin(outputPos.y + time * 50.0) * sin(outputPos.y + time * 50.0);\n      // outputPos.x = outputPos.x + cos(outputPos.x + time * 50.0) * sin(outputPos.x + time * 50.0);\n  \n      vUv = uv;\n  \n      gl_Position = outputPos;\n      gl_PointSize = pointSize;\n  }\n  `\n  \n  let displayF = `\n  // uniform sampler2D posTex;\n  \n  uniform sampler2D picture;\n  uniform float opacity;\n  \n  uniform float time;\n  \n  varying vec2 vUv;\n  \n  void main() {\n      // vec4 posColor = texture2D(posTex, vUv);\n  \n      vec4 imgColor = texture2D(picture, vUv);\n  \n      vec4 outputColor = imgColor;\n      outputColor.a = outputColor.a * opacity;\n  \n      // outputColor.xyz *= posColor.xyz;\n      \n      outputColor.rgb = mix(outputColor.rgb + 0.2, vec3(1.0), smoothstep(0.0, 1.0, abs(sin(time * 5.0))));\n  \n      gl_FragColor = outputColor;\n  }\n  `\n  var defaultPingPong = `//\n//THANK YOU for your support <3 \n//\n\n#include <common>\nprecision highp sampler2D;\n\n//\n//  Classic Perlin 3D Noise\n//  by Stefan Gustavson\n//\n\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec2 fade(vec2 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec2 P){\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n  vec4 i = permute(permute(ix) + iy);\n  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n  vec4 gy = abs(gx) - 0.5;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n  vec4 norm = 1.79284291400159 - 0.85373472095314 *\n      vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n#define M_PI 3.1415926535897932384626433832795\nfloat atan2(in float y, in float x) {\n  bool xgty = (abs(x) > abs(y));\n  return mix(M_PI/2.0 - atan(x,y), atan(y,x), float(xgty));\n}\n\nvec3 ballify (vec3 pos, float r) {\n  float az = atan2(pos.y, pos.x);\n  float el = atan2(pos.z, sqrt(pos.x * pos.x + pos.y * pos.y));\n  return vec3(\n    r * cos(el) * cos(az),\n    r * cos(el) * sin(az),\n    r * sin(el)\n  );\n}\n\nvec3 fromBall(float r, float az, float el) {\n  return vec3(\n    r * cos(el) * cos(az),\n    r * cos(el) * sin(az),\n    r * sin(el)\n  );\n}\n\nvoid toBall(vec3 pos, out float az, out float el) {\n  az = atan2(pos.y, pos.x);\n  el = atan2(pos.z, sqrt(pos.x * pos.x + pos.y * pos.y));\n}\n\nmat3 rotateZ(float rad) {\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat3(\n        c, s, 0.0,\n        -s, c, 0.0,\n        0.0, 0.0, 1.0\n    );\n}\n\nmat3 rotateY(float rad) {\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat3(\n        c, 0.0, -s,\n        0.0, 1.0, 0.0,\n        s, 0.0, c\n    );\n}\n\nmat3 rotateX(float rad) {\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0, c, s,\n        0.0, -s, c\n    );\n}\n\n// float Gravity(float z) {\n//   float G, eZ;\n//   const float ER = 6378150.0;\n//   const float ER2 = 6378150.0 * 6378150.0;\n//   eZ = ER + z;\n//   G = 9.81 * ER2 / (eZ * eZ);\n//   return G;\n// }\n\nfloat constrain(float val, float min, float max) {\n    if (val < min) {\n        return min;\n    } else if (val > max) {\n        return max;\n    } else {\n        return val;\n    }\n}\n\nvec3 getDiff (vec3 lastPos, vec3 mouse) {\n  vec3 diff = lastPos.xyz - mouse;\n  float distance = constrain(length(diff), 1.0, 5.0);\n  float strength = 1.0 / (distance * distance);\n\n  diff = normalize(diff);\n  diff = diff * strength * -1.0;\n\n  return diff;\n}\n\nvec3 resDiff (in vec3 lastPos, in vec3 mouse) {\n  vec3 diff = lastPos - mouse;\n  diff = normalize(diff) * -1.0;\n  return diff;\n}\n\nuniform float time;\nuniform sampler2D lastTexture;\nuniform sampler2D indexerTexture;\n\nuniform vec3 mouse;\n\nvoid main () {\n\n  // @v@\n  // @.@\n\n  vec2 uv = gl_FragCoord.xy / resolution.xy;\n\n  vec4 indexer = texture2D(indexerTexture, uv);\n  vec4 lastPos = texture2D(lastTexture, uv);\n\n  float i = indexer.x;\n  float e = indexer.y;\n  float u = indexer.z;\n\n  vec3 nextPos = vec3(lastPos);\n\n  float x = 0.5 - rand(uv + .1);\n  float y = 0.5 - rand(uv + .2);\n  float z = 0.5 - rand(uv + .3);\n  \n  vec3 randomBall = ballify(vec3(x, y, z) + mouse, 1.0);\n  \n  vec3 pt1 = ballify(randomBall + nextPos, 15.0);\n  pt1.z += cnoise(pt1.xy + time * 20.0) * 6.0;\n  \n  \n  vec3 pt2 = ballify(randomBall + nextPos, 15.0);\n  pt2.z += rand(pt2.xy + time * 20.0);\n  \n  \n  nextPos = mix(pt1, pt2, smoothstep(0.0, 1.0, abs(distance(mouse, vec3(0.0))) / 0.5));\n  nextPos += getDiff(nextPos, mouse * 17.0) * 50.0;\n  \n  // remix code end here//\n  gl_FragColor = vec4(nextPos, 1.0);\n}\n\n  \n  \n  `\n    \n    \n  let mouseV3 = new THREE.Vector3(0.0, 0.0, 0.0);\n  \n  let init = ({ pingPongShader }) => {\n    try {\n      let newPingMat = gpuCompute.createShaderMaterial(pingPongShader, {\n        lastTexture: { value: null },\n        indexerTexture: { value: indexerTexture },\n        time: { value: 0 },\n        mouse: { value: mouseV3 }\n      })\n      let newPongMat = gpuCompute.createShaderMaterial(pingPongShader, {\n        lastTexture: { value: null },\n        indexerTexture: { value: indexerTexture },\n        time: { value: 0 },\n        mouse: { value: mouseV3 }\n      })   \n      pingMat = newPingMat\n      pongMat = newPongMat\n    } catch (e) {\n      console.error(e)    \n    }\n  }\n  \n  init({ pingPongShader: defaultPingPong })\n  \n  var mouser = () => {\n    window.addEventListener('mousemove', (evt) => {\n      let x = (evt.pageX - window.innerWidth * 0.5) / window.innerWidth\n      let y = (evt.pageY - window.innerHeight * 0.5) / window.innerHeight\n      let z = 0.0\n      y *= -1\n  \n      pingMat.uniforms.mouse.value.copy({ x, y, z })\n      pongMat.uniforms.mouse.value.copy({ x, y, z })\n    }, false)\n    \n    var ev = {\n      touchSurface: renderer.domElement\n    };\n    \n    var isClick = false\n    ev.touchSurface.addEventListener('click', () => {\n      if (!isClick) {\n        // pingMat.uniforms.tapCount.value++\n        // pongMat.uniforms.tapCount.value++\n      }\n    }, false)\n    ev.touchSurface.addEventListener('touchstart', (evt) => {\n      isClick = true\n      setTimeout(() => {\n        isClick = false\n      }, 111)\n    }, false)\n    ev.touchSurface.addEventListener('touchend', (evt) => {\n      if (isClick) {\n        // pingMat.uniforms.tapCount.value++\n        // pongMat.uniforms.tapCount.value++\n      }\n    }, false)\n    ev.touchSurface.addEventListener('touchmove', (evt) => {\n      evt.preventDefault()\n      let x = (evt.touches[0].pageX - window.innerWidth * 0.5) / window.innerWidth\n      let y = (evt.touches[0].pageY - window.innerHeight * 0.5) / window.innerHeight\n      let z = 0.0\n  \n      y *= -1\n  \n      pingMat.uniforms.mouse.value.copy({ x, y, z })\n      pongMat.uniforms.mouse.value.copy({ x, y, z })\n    }, false)\n  }\n  mouser()\n  \n  // sim part\n  let procSim = () => {\n    pingMat.uniforms.lastTexture.value = pongTarget.texture\n    pongMat.uniforms.lastTexture.value = pingTarget.texture\n  \n    pingMat.uniforms.time.value = window.performance.now() * 0.0001\n    pongMat.uniforms.time.value = window.performance.now() * 0.0001\n  \n    if (ticker % 2 === 0) {\n      gpuCompute.doRenderTarget(pongMat, pongTarget)\n    } else {\n      gpuCompute.doRenderTarget(pingMat, pingTarget)\n    }\n  }\n  \n  // display part\n  var geometry = new THREE.PlaneBufferGeometry(1.0, 1.0, SIZE - 1, SIZE - 1)\n  var material = new THREE.ShaderMaterial({\n    // blending: THREE.AdditiveBlending,\n    // depthTest: false,\n    transparent: true,\n    depthWrite: false,\n    vertexShader: displayV,\n    fragmentShader: displayF,\n    defines: {\n      resolution: 'vec2( ' + SIZE.toFixed(1) + ', ' + SIZE.toFixed(1) + ' )'\n    },\n    uniforms: {\n      time: { value: 0 },\n      opacity: { value: 0.5 },\n      posTex: { value: null },\n      \n      indexerTexture: { value: indexerTexture },\n  \n      picture: { value: new THREE.TextureLoader().load('https://picsum.photos/g/128?image=1081', (texture) => { texture.needsUpdate = true }) },\n      pointSize: { value: window.devicePixelRatio || 1.0 }\n    }\n  })\n  \n  var points = new THREE.Points(geometry, material)\n  // var points = ev.points = new THREE.Points(geometry, material)\n  points.matrixAutoUpdate = false\n  points.updateMatrix()\n  points.frustumCulled = false\n  \n  scene.add(points);\n  \n  let rAFID = 0\n  let rAF = () => {\n    rAFID = window.requestAnimationFrame(rAF)\n    procSim()\n    if (ticker % 2 === 0) {\n      material.uniforms.posTex.value = pongTarget.texture;\n    } else {\n      material.uniforms.posTex.value = pingTarget.texture;\n    }\n    ticker++\n    material.uniforms.time.value = window.performance.now() * 0.0001\n  }\n  rAFID = window.requestAnimationFrame(rAF);\n  \n});\n\n",
        "meta": [
          {
            "id": "_r174941373",
            "label": "color",
            "type": "color",
            "value": "#f1ce4b"
          }
        ],
        "_id": "5c4f82d6226b99001724979b",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c4f6e9f226b990017249712module_737658780472",
        "created_at": "2019-01-28T21:50:45.094Z",
        "updated_at": "2019-01-28T21:50:45.094Z",
        "__v": 0
      },
      {
        "pos": {
          "x": 33,
          "y": 373
        },
        "size": {
          "w": 200,
          "h": 40
        },
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "name": "WebGL Render Engine",
        "bg": "",
        "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  // inputs,\n  // outputs,\n  \n  Input,\n  Output\n} = env\n/* esltint-enable */\nconsole.log(`========  ${box.name} is Ready.  ========`)\n\n\nResources.js.need('threejs', [\n\t'https://threejs.org/build/three.min.js',\n  'https://threejs.org/examples/js/controls/OrbitControls.js',\n]);\n\nvar self = this\n\nResources.ensure(['threejs']).then(() => {\n\tvar renderer = new THREE.WebGLRenderer({ preserveDrawingBuffer: true, antialias: true, alpha: true });\n\tvar camera = new THREE.PerspectiveCamera( 75, 1.0, 0.1, 1000 );\n\tvar scene = new THREE.Scene()\n\t\n\tcamera.position.z = 200;\n\t\n\tvar controls = new THREE.OrbitControls(camera, renderer.domElement);\n\t\n\tvar composer = false\n\tResources.ensure(['composer']).then(() => {\n\t  composer = Resources.get('composer')\n\t});\n  \n  renderer.domElement.style.marginBottom = '-6px';\n  renderer.domElement.style.visibility = 'hidden'\n  \n  Resources.set('scene', scene);\n  Resources.set('renderer', renderer);\n  Resources.set('camera', camera);\n  Resources.get('rootDOM').appendChild(renderer.domElement);\n  \n  Input('onFrame', (v) => {\n    if (scene) {\n      if (composer) {\n        composer.render();\n      } else {\n        renderer.render(scene, camera);\n      }\n    }\n    \n    controls.update()\n    Output('onFrame', v)\n    Output('onScene', scene)\n  })\n  \n  \n  // pass through render signal\n  // Signal.$on(inputs[0].id, (progress) => {\n  //   Signal.$emit(outputs[0].id, progress);\n  //   if (composer) {\n  //     composer.render();\n  //   } else {\n  //     renderer.render(scene, camera);\n  //   }\n  //   controls.update()\n  // });\n  \n  // on resizer\n  var rectCache = {\n    width: 0,\n    height: 0\n  }\n  \n  Input('onResize', (info) => {\n    if (rectCache.width !== info.rect.width || rectCache.height !== info.rect.height) {\n      rectCache.width = info.rect.width\n      rectCache.height = info.rect.height\n      camera.aspect = rectCache.width / rectCache.height;\n    \tcamera.updateProjectionMatrix();\n      renderer.setPixelRatio(window.devicePixelRatio || 1.0);\n      renderer.setSize(rectCache.width, rectCache.height);\n    }\n    renderer.domElement.style.visibility = 'visible';\n    Output('onResize', info);\n  });\n});\n\n// this.onClean = () => {\n//   console.log('onClean', box.id);\n//   Resources.ensure(['renderer']).then(() => {\n//     let renderer = Resources.get('renderer')\n//     Resources.get('rootDOM').removeChild(renderer.domElement)\n//   });\n// }\n",
        "meta": [],
        "_id": "5c4f82d6226b990017249799",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4module_498705463997",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.926Z",
        "updated_at": "2019-01-08T11:20:16.926Z"
      },
      {
        "pos": {
          "x": 44,
          "y": 512
        },
        "size": {
          "w": 200,
          "h": 40
        },
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "name": "Glowing Effect",
        "bg": "",
        "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  inputs,\n  outputs,\n  IO,\n  Input,\n  Output,\n  OutputAll,\n  getMeta\n} = env\n/* esltint-enable */\nconsole.log(`========  ${box.name} is Ready.  ========`)\n\n\n// let getMeta = (key) => {\n// \treturn (box.meta.find(e => e.label === key) || {}).value\n// }\n\nResources.ensure(['threejs']).then(() => {\n  Resources.js.need('effect-composer', [\n    'https://threejs.org/examples/js/postprocessing/EffectComposer.js',\n    'https://threejs.org/examples/js/postprocessing/RenderPass.js',\n    'https://threejs.org/examples/js/postprocessing/ShaderPass.js',\n    'https://threejs.org/examples/js/shaders/CopyShader.js',\n    'https://threejs.org/examples/js/shaders/LuminosityHighPassShader.js',\n    'https://threejs.org/examples/js/postprocessing/UnrealBloomPass.js'\n  ]);\n});\n\nvar self = this\n\nResources.ensure(['threejs', 'effect-composer', 'renderer', 'scene', 'camera']).then(() => {\n\tvar renderer = Resources.get('renderer')\n\tvar scene = Resources.get('scene')\n\tvar camera = Resources.get('camera')\n\t// on resizer\n  let rectCache = {\n    width: 128,\n    height: 128\n  }\n  \n  var dpi = window.devicePixelRatio || 1.0\n\n  let composer = this.composer = new THREE.EffectComposer(renderer)\n  Resources.set('composer', composer);\n  \n  let composerResizer = () => {\n    composer.setSize(rectCache.width * dpi, rectCache.height * dpi)\n    bloomPass.setSize(rectCache.width * dpi, rectCache.height * dpi)\n  }\n  \n  let renderBG = new THREE.RenderPass(scene, camera)\n  let bloomPass = new THREE.UnrealBloomPass(new THREE.Vector2(rectCache.width * dpi, rectCache.height * dpi), 1.5, 0.4, 0.85)\n  bloomPass.renderToScreen = true\n\n  // bloomPass.threshold = Number(0.0001)\n  // bloomPass.strength = Number(3.5)\n  // bloomPass.radius = Number(1.0)\n\n  composer.addPass(renderBG)\n  composer.addPass(bloomPass)\n\t\n  // pass through render signal\n  Input('onFrame', (v) => {\n    Output('onFrame', v);\n  });\n  \n  Input('onResize', (info) => {\n    if (rectCache.width !== info.rect.width || rectCache.height !== info.rect.height) {\n      rectCache.width = info.rect.width\n      rectCache.height = info.rect.height\n      composerResizer()\n    }\n  });\n  \n  let bgColor = new THREE.Color(getMeta('bgColor'))\n  \n  Input('onTimeline', (timeline) => {\n    bgColor.set(getMeta('bgColor'))\n    scene.background = bgColor\n    if (timeline.$ready) {\n      bloomPass.threshold = Number(getMeta('threshold'))\n      bloomPass.strength = Number(getMeta('strength')) * timeline.strength.var\n      bloomPass.radius = Number(getMeta('radius'))\n    }\n  });\n  \n});\n\n",
        "meta": [
          {
            "id": "_r751248213",
            "label": "threshold",
            "type": "range",
            "min": "0",
            "max": "1",
            "step": "0.001",
            "value": 0.387
          },
          {
            "id": "_r473085828",
            "label": "strength",
            "type": "range",
            "min": "0",
            "max": "5",
            "step": 0.1,
            "value": 1.8
          },
          {
            "id": "_r47531394",
            "label": "radius",
            "type": "range",
            "min": "0",
            "max": "3",
            "step": "0.01",
            "value": 1.2
          },
          {
            "id": "_r411700999",
            "label": "bgColor",
            "type": "color",
            "value": "#001b45"
          }
        ],
        "_id": "5c4f82d6226b990017249798",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c234d8b9fb407001754dd50module_673490855101",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.926Z",
        "updated_at": "2019-01-08T11:20:16.926Z"
      }
    ],
    "connectors": [
      {
        "mod": {
          "from": "_hive_5c234d8b9fb407001754dd50module_673490855101",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c234d8b9fb407001754dd50socket_59415369331",
          "to": ""
        },
        "idx": 1545874257165,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c234d8b9fb407001754dd50module_673490855101",
        "name": "my socket",
        "color": "#e4e3e5",
        "_id": "5c4f82d6226b99001724976a",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c234d8b9fb407001754dd50socket_59415369331",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.923Z",
        "updated_at": "2019-01-08T11:20:16.923Z"
      },
      {
        "mod": {
          "from": "_hive_5c234d8b9fb407001754dd50module_673490855101",
          "to": "_hive_5c216d362dc0500017eec0d4module_498705463997"
        },
        "socket": {
          "from": "_hive_5c234d8b9fb407001754dd50socket_918256974382",
          "to": "_hive_5c234d8b9fb407001754dd50socket_681924004470"
        },
        "idx": 1545874257161,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "input",
        "modID": "_hive_5c234d8b9fb407001754dd50module_673490855101",
        "name": "onResize",
        "color": "#ff7cfa",
        "_id": "5c4f82d6226b99001724976b",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c234d8b9fb407001754dd50socket_918256974382",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.923Z",
        "updated_at": "2019-01-08T11:20:16.923Z"
      },
      {
        "mod": {
          "from": "_hive_5c2bf1674a54460017ee5842module_231886377715",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c2bf1674a54460017ee5842socket_648344830368",
          "to": ""
        },
        "idx": 1546398709659,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c2bf1674a54460017ee5842module_231886377715",
        "name": "my socket",
        "color": "#e4e3e5",
        "_id": "5c4f82d6226b99001724976f",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c2bf1674a54460017ee5842socket_648344830368",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_542035946732",
          "to": "_hive_5c216d362dc0500017eec0d4module_498705463997"
        },
        "socket": {
          "from": "_hive_5c216d362dc0500017eec0d4socket_967655102975",
          "to": "_hive_5c216d362dc0500017eec0d4socket_984258680163"
        },
        "idx": 1545711358026,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c216d362dc0500017eec0d4module_542035946732",
        "name": "onFrame",
        "color": "#05f1de",
        "_id": "5c4f82d6226b99001724976c",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4socket_967655102975",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.923Z",
        "updated_at": "2019-01-08T11:20:16.923Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_791055199420",
          "to": "_hive_5c24382d9adca6001780ced4module_624493095826"
        },
        "socket": {
          "from": "_hive_5c216d362dc0500017eec0d4socket_472439359204",
          "to": "_hive_5c296a16fde0030017366b46socket_927092796131"
        },
        "idx": 1545695299854,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c216d362dc0500017eec0d4module_791055199420",
        "name": "onFrame",
        "color": "#00f1de",
        "_id": "5c4f82d6226b990017249772",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4socket_472439359204",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_791055199420",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c216d362dc0500017eec0d4socket_793234601449",
          "to": ""
        },
        "idx": 1545695299862,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c216d362dc0500017eec0d4module_791055199420",
        "name": "onFrame",
        "color": "#00f1de",
        "_id": "5c4f82d6226b99001724976d",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4socket_793234601449",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c24382d9adca6001780ced4module_815560743775",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c24382d9adca6001780ced4socket_135549837207",
          "to": ""
        },
        "idx": 1546043796475,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "input",
        "modID": "_hive_5c24382d9adca6001780ced4module_815560743775",
        "name": "my socket",
        "color": "#92fe4b",
        "_id": "5c4f82d6226b990017249770",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c24382d9adca6001780ced4socket_135549837207",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_791055199420",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c216d362dc0500017eec0d4socket_764885876841",
          "to": ""
        },
        "idx": 1545695299859,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c216d362dc0500017eec0d4module_791055199420",
        "name": "onFrame",
        "color": "#00f1de",
        "_id": "5c4f82d6226b990017249774",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4socket_764885876841",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c234d8b9fb407001754dd50module_673490855101",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c234d8b9fb407001754dd50socket_679824688311",
          "to": ""
        },
        "idx": 1545874257164,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c234d8b9fb407001754dd50module_673490855101",
        "name": "onFrame",
        "color": "#05f1de",
        "_id": "5c4f82d6226b99001724976e",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c234d8b9fb407001754dd50socket_679824688311",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_498705463997",
          "to": "_hive_5c234d8b9fb407001754dd50module_673490855101"
        },
        "socket": {
          "from": "_hive_5c234d8b9fb407001754dd50socket_681924004470",
          "to": "_hive_5c234d8b9fb407001754dd50socket_918256974382"
        },
        "idx": 1545875829113,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c216d362dc0500017eec0d4module_498705463997",
        "name": "onResize",
        "color": "#ff7cfa",
        "_id": "5c4f82d6226b990017249777",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c234d8b9fb407001754dd50socket_681924004470",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.923Z",
        "updated_at": "2019-01-08T11:20:16.923Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_498705463997",
          "to": "_hive_5c216d362dc0500017eec0d4module_542035946732"
        },
        "socket": {
          "from": "_hive_5c216d362dc0500017eec0d4socket_984258680163",
          "to": "_hive_5c216d362dc0500017eec0d4socket_967655102975"
        },
        "idx": 1545704570549,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "input",
        "modID": "_hive_5c216d362dc0500017eec0d4module_498705463997",
        "name": "onFrame",
        "color": "#00f1de",
        "_id": "5c4f82d6226b990017249773",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4socket_984258680163",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c234d8b9fb407001754dd50module_673490855101",
          "to": "_hive_5c24382d9adca6001780ced4module_624493095826"
        },
        "socket": {
          "from": "_hive_5c29c764e083af0017f21757socket_577333067774",
          "to": "_hive_5c24382d9adca6001780ced4socket_314573235936"
        },
        "idx": 1546285687328,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "input",
        "modID": "_hive_5c234d8b9fb407001754dd50module_673490855101",
        "name": "onTimeline",
        "color": "#a8ceff",
        "_id": "5c4f82d6226b990017249775",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c29c764e083af0017f21757socket_577333067774",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c24382d9adca6001780ced4module_624493095826",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c24382d9adca6001780ced4socket_118020687842",
          "to": ""
        },
        "idx": 1546065326415,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c24382d9adca6001780ced4module_624493095826",
        "name": "onTimeline6",
        "color": "#a8ceff",
        "_id": "5c4f82d6226b99001724977c",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c24382d9adca6001780ced4socket_118020687842",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_542035946732",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c216d362dc0500017eec0d4socket_624337151058",
          "to": ""
        },
        "idx": 1545711358029,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c216d362dc0500017eec0d4module_542035946732",
        "name": "resize2",
        "color": "#ff7cfa",
        "_id": "5c4f82d6226b990017249779",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4socket_624337151058",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.923Z",
        "updated_at": "2019-01-08T11:20:16.923Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_791055199420",
          "to": "_hive_5c216d362dc0500017eec0d4module_542035946732"
        },
        "socket": {
          "from": "_hive_5c216d362dc0500017eec0d4socket_706901781830",
          "to": "_hive_5c296a16fde0030017366b46socket_473040720177"
        },
        "idx": 1545695299853,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c216d362dc0500017eec0d4module_791055199420",
        "name": "onFrame",
        "color": "#00f1de",
        "_id": "5c4f82d6226b990017249771",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4socket_706901781830",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.925Z",
        "updated_at": "2019-01-08T11:20:16.925Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_542035946732",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c216d362dc0500017eec0d4socket_711443654290",
          "to": ""
        },
        "idx": 1545711358036,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c216d362dc0500017eec0d4module_542035946732",
        "name": "resize3",
        "color": "#ff7cfa",
        "_id": "5c4f82d6226b990017249778",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4socket_711443654290",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.925Z",
        "updated_at": "2019-01-08T11:20:16.925Z"
      },
      {
        "mod": {
          "from": "_hive_5c24382d9adca6001780ced4module_624493095826",
          "to": "_hive_5c234d8b9fb407001754dd50module_673490855101"
        },
        "socket": {
          "from": "_hive_5c24382d9adca6001780ced4socket_314573235936",
          "to": "_hive_5c29c764e083af0017f21757socket_577333067774"
        },
        "idx": 1546065326406,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c24382d9adca6001780ced4module_624493095826",
        "name": "onTimeline1",
        "color": "#a8ceff",
        "_id": "5c4f82d6226b990017249781",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c24382d9adca6001780ced4socket_314573235936",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_542035946732",
          "to": "_hive_5c216d362dc0500017eec0d4module_498705463997"
        },
        "socket": {
          "from": "_hive_5c216d362dc0500017eec0d4socket_9552257515",
          "to": "_hive_5c216d362dc0500017eec0d4socket_1084991658835"
        },
        "idx": 1545711358027,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c216d362dc0500017eec0d4module_542035946732",
        "name": "resize1",
        "color": "#ff7cfa",
        "_id": "5c4f82d6226b99001724977e",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4socket_9552257515",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c234d8b9fb407001754dd50module_673490855101",
          "to": "_hive_5c216d362dc0500017eec0d4module_498705463997"
        },
        "socket": {
          "from": "_hive_5c234d8b9fb407001754dd50socket_400210257960",
          "to": "_hive_5c216d362dc0500017eec0d4socket_516251817815"
        },
        "idx": 1545874257159,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "input",
        "modID": "_hive_5c234d8b9fb407001754dd50module_673490855101",
        "name": "onFrame",
        "color": "#05f1de",
        "_id": "5c4f82d6226b990017249776",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c234d8b9fb407001754dd50socket_400210257960",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.925Z",
        "updated_at": "2019-01-08T11:20:16.925Z"
      },
      {
        "mod": {
          "from": "_hive_5c24382d9adca6001780ced4module_624493095826",
          "to": "_hive_5c216d362dc0500017eec0d4module_791055199420"
        },
        "socket": {
          "from": "_hive_5c296a16fde0030017366b46socket_927092796131",
          "to": "_hive_5c216d362dc0500017eec0d4socket_472439359204"
        },
        "idx": 1546239396071,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "input",
        "modID": "_hive_5c24382d9adca6001780ced4module_624493095826",
        "name": "onFrame",
        "color": "#05f1de",
        "_id": "5c4f82d6226b99001724977a",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c296a16fde0030017366b46socket_927092796131",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c24382d9adca6001780ced4module_624493095826",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c24382d9adca6001780ced4socket_342084457046",
          "to": ""
        },
        "idx": 1546065326411,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c24382d9adca6001780ced4module_624493095826",
        "name": "onTimeline4",
        "color": "#a8ceff",
        "_id": "5c4f82d6226b99001724977d",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c24382d9adca6001780ced4socket_342084457046",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_542035946732",
          "to": "_hive_5c216d362dc0500017eec0d4module_791055199420"
        },
        "socket": {
          "from": "_hive_5c296a16fde0030017366b46socket_473040720177",
          "to": "_hive_5c216d362dc0500017eec0d4socket_706901781830"
        },
        "idx": 1546234840006,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "input",
        "modID": "_hive_5c216d362dc0500017eec0d4module_542035946732",
        "name": "onFrame",
        "color": "#05f1de",
        "_id": "5c4f82d6226b990017249786",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c296a16fde0030017366b46socket_473040720177",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.925Z",
        "updated_at": "2019-01-08T11:20:16.925Z"
      },
      {
        "mod": {
          "from": "_hive_5c24382d9adca6001780ced4module_624493095826",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c24382d9adca6001780ced4socket_289414618978",
          "to": ""
        },
        "idx": 1546065326410,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c24382d9adca6001780ced4module_624493095826",
        "name": "onTimeline3",
        "color": "#a8ceff",
        "_id": "5c4f82d6226b990017249783",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c24382d9adca6001780ced4socket_289414618978",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.925Z",
        "updated_at": "2019-01-08T11:20:16.925Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_791055199420",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c216d362dc0500017eec0d4socket_907889095702",
          "to": ""
        },
        "idx": 1545695299855,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c216d362dc0500017eec0d4module_791055199420",
        "name": "onFrame",
        "color": "#00f1de",
        "_id": "5c4f82d6226b99001724977b",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4socket_907889095702",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.923Z",
        "updated_at": "2019-01-08T11:20:16.923Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_498705463997",
          "to": "_hive_5c216d362dc0500017eec0d4module_542035946732"
        },
        "socket": {
          "from": "_hive_5c216d362dc0500017eec0d4socket_1084991658835",
          "to": "_hive_5c216d362dc0500017eec0d4socket_9552257515"
        },
        "idx": 1545704570551,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "input",
        "modID": "_hive_5c216d362dc0500017eec0d4module_498705463997",
        "name": "onResize",
        "color": "#ff7cfa",
        "_id": "5c4f82d6226b990017249782",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4socket_1084991658835",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.923Z",
        "updated_at": "2019-01-08T11:20:16.923Z"
      },
      {
        "mod": {
          "from": "_hive_5c234d8b9fb407001754dd50module_673490855101",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c234d8b9fb407001754dd50socket_43083576117",
          "to": ""
        },
        "idx": 1545874257166,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c234d8b9fb407001754dd50module_673490855101",
        "name": "my socket",
        "color": "#e4e3e5",
        "_id": "5c4f82d6226b99001724977f",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c234d8b9fb407001754dd50socket_43083576117",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_791055199420",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c216d362dc0500017eec0d4socket_280251465660",
          "to": ""
        },
        "idx": 1545695299857,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c216d362dc0500017eec0d4module_791055199420",
        "name": "onFrame",
        "color": "#00f1de",
        "_id": "5c4f82d6226b990017249788",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4socket_280251465660",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.925Z",
        "updated_at": "2019-01-08T11:20:16.925Z"
      },
      {
        "mod": {
          "from": "_hive_5c234d8b9fb407001754dd50module_673490855101",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c234d8b9fb407001754dd50socket_122128054140",
          "to": ""
        },
        "idx": 1545874257167,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c234d8b9fb407001754dd50module_673490855101",
        "name": "my socket",
        "color": "#e4e3e5",
        "_id": "5c4f82d6226b99001724978b",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c234d8b9fb407001754dd50socket_122128054140",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.923Z",
        "updated_at": "2019-01-08T11:20:16.923Z"
      },
      {
        "mod": {
          "from": "_hive_5c24382d9adca6001780ced4module_624493095826",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c24382d9adca6001780ced4socket_237021460432",
          "to": ""
        },
        "idx": 1546065326413,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c24382d9adca6001780ced4module_624493095826",
        "name": "onTimeline5",
        "color": "#a8ceff",
        "_id": "5c4f82d6226b990017249780",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c24382d9adca6001780ced4socket_237021460432",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.923Z",
        "updated_at": "2019-01-08T11:20:16.923Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_791055199420",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c2bf1674a54460017ee5842socket_107133150501",
          "to": ""
        },
        "idx": 1546395685802,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "input",
        "modID": "_hive_5c216d362dc0500017eec0d4module_791055199420",
        "name": "onClock",
        "color": "#eaca38",
        "_id": "5c4f82d6226b990017249787",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c2bf1674a54460017ee5842socket_107133150501",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.925Z",
        "updated_at": "2019-01-08T11:20:16.925Z"
      },
      {
        "mod": {
          "from": "_hive_5c2bf1674a54460017ee5842module_231886377715",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c2bf1674a54460017ee5842socket_1073912225296",
          "to": ""
        },
        "idx": 1546398709657,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c2bf1674a54460017ee5842module_231886377715",
        "name": "my socket",
        "color": "#e4e3e5",
        "_id": "5c4f82d6226b990017249784",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c2bf1674a54460017ee5842socket_1073912225296",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.925Z",
        "updated_at": "2019-01-08T11:20:16.925Z"
      },
      {
        "mod": {
          "from": "_hive_5c24382d9adca6001780ced4module_624493095826",
          "to": "_hive_5c4f6e9f226b990017249712module_737658780472"
        },
        "socket": {
          "from": "_hive_5c24382d9adca6001780ced4socket_300323104773",
          "to": "_hive_5c4f6e9f226b990017249712socket_3264529383"
        },
        "idx": 1546065326407,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c24382d9adca6001780ced4module_624493095826",
        "name": "onTimeline2",
        "color": "#a8ceff",
        "_id": "5c4f82d6226b99001724978c",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c24382d9adca6001780ced4socket_300323104773",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c4f6e9f226b990017249712module_882360011137",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c4f6e9f226b990017249712socket_158213344185",
          "to": ""
        },
        "idx": 1548711017215,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c4f6e9f226b990017249712module_882360011137",
        "name": "onClock",
        "color": "#e9ca38",
        "_id": "5c4f82d6226b99001724978d",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c4f6e9f226b990017249712socket_158213344185",
        "created_at": "2019-01-28T21:30:17.326Z",
        "updated_at": "2019-01-28T21:30:17.326Z",
        "__v": 0
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_498705463997",
          "to": "_hive_5c234d8b9fb407001754dd50module_673490855101"
        },
        "socket": {
          "from": "_hive_5c216d362dc0500017eec0d4socket_516251817815",
          "to": "_hive_5c234d8b9fb407001754dd50socket_400210257960"
        },
        "idx": 1545704570555,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c216d362dc0500017eec0d4module_498705463997",
        "name": "onFrame",
        "color": "#00f1de",
        "_id": "5c4f82d6226b990017249785",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4socket_516251817815",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.925Z",
        "updated_at": "2019-01-08T11:20:16.925Z",
        "onHand": false
      },
      {
        "mod": {
          "from": "_hive_5c4f6e9f226b990017249712module_737658780472",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c4f6e9f226b990017249712socket_652014517913",
          "to": ""
        },
        "idx": 1548712245233,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c4f6e9f226b990017249712module_737658780472",
        "name": "onTimeline",
        "color": "#a8ceff",
        "_id": "5c4f82d6226b990017249790",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c4f6e9f226b990017249712socket_652014517913",
        "created_at": "2019-01-28T21:50:45.343Z",
        "updated_at": "2019-01-28T21:50:45.343Z",
        "__v": 0
      },
      {
        "mod": {
          "from": "_hive_5c24382d9adca6001780ced4module_624493095826",
          "to": "_hive_5c29c764e083af0017f21757module_11610133074"
        },
        "socket": {
          "from": "_hive_5c24382d9adca6001780ced4socket_630105669056",
          "to": "_hive_5c29c764e083af0017f21757socket_514282842606"
        },
        "idx": 1546065326417,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c24382d9adca6001780ced4module_624493095826",
        "name": "onTimeline7",
        "color": "#a8ceff",
        "_id": "5c4f82d6226b990017249789",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c24382d9adca6001780ced4socket_630105669056",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.924Z",
        "updated_at": "2019-01-08T11:20:16.924Z"
      },
      {
        "mod": {
          "from": "_hive_5c216d362dc0500017eec0d4module_791055199420",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c216d362dc0500017eec0d4socket_757304952328",
          "to": ""
        },
        "idx": 1545695299860,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c216d362dc0500017eec0d4module_791055199420",
        "name": "onFrame",
        "color": "#00f1de",
        "_id": "5c4f82d6226b99001724978a",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c216d362dc0500017eec0d4socket_757304952328",
        "__v": 0,
        "created_at": "2019-01-08T11:20:16.923Z",
        "updated_at": "2019-01-08T11:20:16.923Z"
      },
      {
        "mod": {
          "from": "_hive_5c4f6e9f226b990017249712module_737658780472",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c4f6e9f226b990017249712socket_920586834868",
          "to": ""
        },
        "idx": 1548712245234,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c4f6e9f226b990017249712module_737658780472",
        "name": "my socket",
        "color": "#e4e3e5",
        "_id": "5c4f82d6226b990017249791",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c4f6e9f226b990017249712socket_920586834868",
        "created_at": "2019-01-28T21:50:45.348Z",
        "updated_at": "2019-01-28T21:50:45.348Z",
        "__v": 0
      },
      {
        "mod": {
          "from": "_hive_5c4f6e9f226b990017249712module_737658780472",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c4f6e9f226b990017249712socket_1008781842161",
          "to": ""
        },
        "idx": 1548712245235,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c4f6e9f226b990017249712module_737658780472",
        "name": "my socket",
        "color": "#e4e3e5",
        "_id": "5c4f82d6226b990017249792",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c4f6e9f226b990017249712socket_1008781842161",
        "created_at": "2019-01-28T21:50:45.351Z",
        "updated_at": "2019-01-28T21:50:45.351Z",
        "__v": 0
      },
      {
        "mod": {
          "from": "_hive_5c4f6e9f226b990017249712module_737658780472",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c4f6e9f226b990017249712socket_447783470714",
          "to": ""
        },
        "idx": 1548712245232,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "input",
        "modID": "_hive_5c4f6e9f226b990017249712module_737658780472",
        "name": "my socket",
        "color": "#e4e3e5",
        "_id": "5c4f82d6226b99001724978f",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c4f6e9f226b990017249712socket_447783470714",
        "created_at": "2019-01-28T21:50:45.340Z",
        "updated_at": "2019-01-28T21:50:45.340Z",
        "__v": 0
      },
      {
        "mod": {
          "from": "_hive_5c4f6e9f226b990017249712module_737658780472",
          "to": "_hive_5c24382d9adca6001780ced4module_624493095826"
        },
        "socket": {
          "from": "_hive_5c4f6e9f226b990017249712socket_3264529383",
          "to": "_hive_5c24382d9adca6001780ced4socket_300323104773"
        },
        "idx": 1548712245231,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "input",
        "modID": "_hive_5c4f6e9f226b990017249712module_737658780472",
        "name": "onTimeline",
        "color": "#a8ceff",
        "_id": "5c4f82d6226b99001724978e",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c4f6e9f226b990017249712socket_3264529383",
        "created_at": "2019-01-28T21:50:45.334Z",
        "updated_at": "2019-01-28T21:50:45.334Z",
        "__v": 0
      },
      {
        "mod": {
          "from": "_hive_5c4f6e9f226b990017249712module_737658780472",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c4f6e9f226b990017249712socket_780531520881",
          "to": ""
        },
        "idx": 1548712245237,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "input",
        "modID": "_hive_5c4f6e9f226b990017249712module_737658780472",
        "name": "my socket",
        "color": "#e4e3e5",
        "_id": "5c4f82d6226b990017249794",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c4f6e9f226b990017249712socket_780531520881",
        "created_at": "2019-01-28T21:50:45.361Z",
        "updated_at": "2019-01-28T21:50:45.361Z",
        "__v": 0
      },
      {
        "mod": {
          "from": "_hive_5c4f6e9f226b990017249712module_737658780472",
          "to": ""
        },
        "socket": {
          "from": "_hive_5c4f6e9f226b990017249712socket_781199807145",
          "to": ""
        },
        "idx": 1548712245236,
        "isTemplate": false,
        "isGallery": false,
        "oldID": "",
        "type": "output",
        "modID": "_hive_5c4f6e9f226b990017249712module_737658780472",
        "name": "my socket",
        "color": "#e4e3e5",
        "_id": "5c4f82d6226b990017249793",
        "userID": "5c1daecd6168c20017eec65e",
        "projectID": "5c4f82d6226b990017249769",
        "id": "_hive_5c4f6e9f226b990017249712socket_781199807145",
        "created_at": "2019-01-28T21:50:45.356Z",
        "updated_at": "2019-01-28T21:50:45.356Z",
        "__v": 0
      }
    ],
    "template": {
      "modules": [
        {
          "pos": {
            "x": 368,
            "y": 287
          },
          "size": {
            "w": 200,
            "h": 40
          },
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2a8f7976169000174511ce",
          "name": "Simple Transform Sliders",
          "bg": "",
          "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  Input,\n  Output,\n  OutputAll\n} = env\n//\nlet self = this\n/* esltint-enable */\nconsole.log(`========  ${box.name} is Ready.  ========`)\n\nlet getMeta = (key) => {\n\treturn (box.meta.find(e => e.label === key) || {}).value\n}\n\nvar evt = {}\nlet getItems = () => box.meta.reduce((c, ie, idx) => {\n  c[ie.label] = ie.value\n  return c\n}, evt);\n\nInput('onTimeline', (v) => {\n  Output('uiControl', getItems())\n  Output('onTimeline', v)\n})\n\n",
          "meta": [
            {
              "id": "_r264927804",
              "label": "translateX",
              "type": "range",
              "min": -100,
              "max": 100,
              "step": 0.1,
              "value": 0
            },
            {
              "id": "_r392841688",
              "label": "translateY",
              "type": "range",
              "min": -100,
              "max": 100,
              "step": 0.1,
              "value": 0
            },
            {
              "id": "_r914207710",
              "label": "translateZ",
              "type": "range",
              "min": "-200",
              "max": "200",
              "step": 0.1,
              "value": 0
            },
            {
              "id": "_r172174598",
              "label": "rotateX",
              "type": "range",
              "min": -100,
              "max": 100,
              "step": 0.1,
              "value": 1
            },
            {
              "id": "_r274536640",
              "label": "rotateY",
              "type": "range",
              "min": -100,
              "max": 100,
              "step": 0.1,
              "value": 1
            },
            {
              "id": "_r759804655",
              "label": "rotateZ",
              "type": "range",
              "min": -100,
              "max": 100,
              "step": 0.1,
              "value": 1
            },
            {
              "id": "_r419232716",
              "label": "scaleX",
              "type": "range",
              "min": "-100",
              "max": "100",
              "step": 0.1,
              "value": 5
            },
            {
              "id": "_r722167741",
              "label": "scaleY",
              "type": "range",
              "min": "0",
              "max": "50",
              "step": "0.05",
              "value": 1
            },
            {
              "id": "_r773223356",
              "label": "scaleZ",
              "type": "range",
              "min": "-100",
              "max": "100",
              "step": 0.1,
              "value": 5
            }
          ],
          "_id": "5c2be9ff4a54460017ee57c3",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757module_75684660185",
          "__v": 0
        },
        {
          "pos": {
            "x": 30,
            "y": 30
          },
          "size": {
            "w": 200,
            "h": 40
          },
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21782",
          "name": "Timeline",
          "bg": "",
          "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  Input,\n  Output,\n  OutputAll,\n  getMeta\n} = env\n/* esltint-enable */\nconsole.log(`========  ${box.name} is Ready.  ========`)\n// sender\n\nlet startTime = performance.now() / 1000\n\nInput('onFrame', (evt) => {\n  let timeMode = window.top[box.id + '-timeMode']\n  let progress = window.top[box.id + '-progress']\n  // console.log(timeMode)\n  \n  let timetracks = box.meta.filter(e => e.type === 'timeline-track')\n  timetracks.forEach((m, mi) => {\n    let time = 0\n    \n    if (timeMode === 'toEnv') {\n      time = progress * m.value.totalTime\n    } else {\n      time = performance.now() / 1000 - startTime\n      if (time > m.value.totalTime) {\n        startTime = performance.now() / 1000\n      }\n    }\n    \n    updateTimeValue({ time, mVal: m.value, totalTime: m.value.totalTime })\n  })\n  \n  // tell UI\n  if (timetracks.length > 0) {\n    let m = timetracks[0]\n    let time = performance.now() / 1000 - startTime\n    window.top.postMessage({ type: 'timeline', modID: box.id, time, totalTime: m.value.totalTime, progress: time / m.value.totalTime }, window.location.origin)\n  }\n})\n\n\nlet updateTimeValue = ({ time, mVal, totalTime }) => {\n  mVal.time = time\n  \n  // ---------------------------------\n  // periods\n  //  starting\n  if (time >= mVal.start && time <= mVal.afterStart) {\n    let progress = (time - mVal.start) / (mVal.afterStart - mVal.start)\n    mVal.starting = progress\n    mVal.mode = 'starting'\n    mVal.var = progress\n  }\n\n  // periods\n  // during\n  if (time >= mVal.afterStart && time <= mVal.beforeEnd) {\n    let progress = (time - mVal.afterStart) / (mVal.beforeEnd - mVal.afterStart)\n    mVal.during = progress\n    mVal.mode = 'during'\n    mVal.var = 1.0\n  }\n\n  // periods\n  //  leaving\n  if (time >= mVal.beforeEnd && time <= mVal.end) {\n    let progress = 1.0 - (mVal.end - time) / (mVal.end - mVal.beforeEnd)\n    mVal.leaving = 1.0 - progress\n    mVal.mode = 'leaving'\n    mVal.var = 1.0 - progress\n  }\n\n  // ---------------------------------\n\n  // overriders\n  // before start\n  if (time < mVal.start) {\n    let progress = 0\n    mVal.starting = 0\n    mVal.mode = 'beforeStart'\n    mVal.beforeStart = 0\n    mVal.var = 0\n  }\n\n  // after end\n  if (time > mVal.end) {\n    let progress = 0\n    mVal.leaving = 0\n    mVal.afterEnd = 0\n    mVal.mode = 'afterEnd'\n    mVal.var = 0\n  }\n\n  // timebox mVal\n  // timebox\n  if (time >= mVal.start && time <= mVal.end) {\n    let progress = (time - mVal.start) / (mVal.end - mVal.start)\n    mVal.timebox = progress\n  }\n\n  mVal.tick = time / totalTime\n  mVal.now = time\n};\n\nlet event = {\n  $ready: true\n}\nlet toObject = (key) => {\n  event[key] = getMeta(key)\n}\nInput('onFrame', (v) => {\n  box.meta.filter(e => e.type === 'timeline-track').forEach((m, mi) => {\n    toObject(m.label);\n  });\n  \n  OutputAll(event);\n});\n\n\n// this.onClean = () => {\n//   window.cancelAnimationFrame(rAFID);\n//   console.log('onClean', box.id)\n// }\n",
          "meta": [
            {
              "id": "_r1059487130",
              "label": "opacity",
              "type": "timeline-track",
              "value": {
                "start": 2.7755575615628914e-16,
                "afterStart": 3.848361018826129,
                "beforeEnd": 11.999999999999998,
                "end": 15.000000000000002,
                "totalTime": "15"
              }
            },
            {
              "id": "_r836406453",
              "label": "rate",
              "type": "timeline-track",
              "value": {
                "start": 0,
                "afterStart": 9.094285714285707,
                "beforeEnd": 12,
                "end": 15,
                "totalTime": "15"
              }
            },
            {
              "id": "_r844635908",
              "label": "strength",
              "type": "timeline-track",
              "value": {
                "start": 0,
                "afterStart": 2.2915476190476283,
                "beforeEnd": 11.991964285714277,
                "end": 14.99196428571428,
                "totalTime": "15"
              }
            },
            {
              "id": "_r23648488",
              "label": "scaleX",
              "type": "timeline-track",
              "value": {
                "start": 0,
                "afterStart": 3,
                "beforeEnd": 12,
                "end": 15,
                "totalTime": 15
              }
            }
          ],
          "_id": "5c2bee7d4a54460017ee582c",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757module_998063926878",
          "__v": 0
        },
        {
          "pos": {
            "x": 94,
            "y": 154
          },
          "size": {
            "w": 200,
            "h": 40
          },
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21781",
          "name": "Canvas Size Signal",
          "bg": "",
          "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  inputs,\n  outputs,\n  IO\n} = env\n/* esltint-enable */\nconsole.log(`========  ${box.name} is Ready.  ========`)\n// sender\n\nlet mounter = Resources.get('rootDOM');\nmounter.style.overflow = 'hidden';\n\nvar rect = mounter.getBoundingClientRect();\nIO.Input('onFrame', () => {\n  rect = mounter.getBoundingClientRect();\n  IO.Output('onFrame', { rect })\n})\n\nIO.Input('onFrame', () => {\n  IO.Output(['resize1','resize2','resize3'], { rect })\n})\n\n// this.onClean = () => {\n//   console.log('onClean', box.id)\n// }",
          "meta": [],
          "_id": "5c2bec774a54460017ee57fd",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757module_75273206587",
          "__v": 0
        },
        {
          "pos": {
            "x": 75,
            "y": 365
          },
          "size": {
            "w": 200,
            "h": 40
          },
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21785",
          "name": "Glowing Effect",
          "bg": "",
          "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  inputs,\n  outputs,\n  IO,\n  Input,\n  Output,\n  OutputAll\n} = env\n/* esltint-enable */\nconsole.log(`========  ${box.name} is Ready.  ========`)\n\n\nlet getMeta = (key) => {\n\treturn (box.meta.find(e => e.label === key) || {}).value\n}\n\nResources.js.need('blooming-effect', [\n  'https://threejs.org/examples/js/postprocessing/EffectComposer.js',\n  'https://threejs.org/examples/js/postprocessing/RenderPass.js',\n  'https://threejs.org/examples/js/postprocessing/ShaderPass.js',\n  'https://threejs.org/examples/js/shaders/CopyShader.js',\n  'https://threejs.org/examples/js/shaders/LuminosityHighPassShader.js',\n  'https://threejs.org/examples/js/postprocessing/UnrealBloomPass.js'\n]);\n\nvar self = this\n\nResources.ensure(['threejs', 'blooming-effect', 'renderer', 'scene', 'camera']).then(() => {\n\tvar renderer = Resources.get('renderer')\n\tvar scene = Resources.get('scene')\n\tvar camera = Resources.get('camera')\n\t// on resizer\n  let rectCache = {\n    width: 128,\n    height: 128\n  }\n  \n  var dpi = window.devicePixelRatio || 1.0\n\n  let composer = this.composer = new THREE.EffectComposer(renderer)\n  Resources.set('composer', composer);\n  \n  let composerResizer = () => {\n    composer.setSize(rectCache.width * dpi, rectCache.height * dpi)\n    bloomPass.setSize(rectCache.width * dpi, rectCache.height * dpi)\n  }\n  \n  let renderBG = new THREE.RenderPass(scene, camera)\n  let bloomPass = new THREE.UnrealBloomPass(new THREE.Vector2(rectCache.width * dpi, rectCache.height * dpi), 1.5, 0.4, 0.85)\n  bloomPass.renderToScreen = true\n\n  // bloomPass.threshold = Number(0.0001)\n  // bloomPass.strength = Number(3.5)\n  // bloomPass.radius = Number(1.0)\n\n  composer.addPass(renderBG)\n  composer.addPass(bloomPass)\n\t\n  // pass through render signal\n  Input('onFrame', (v) => {\n    Output('onFrame', v);\n  });\n  \n  Input('onResize', (info) => {\n    if (rectCache.width !== info.rect.width || rectCache.height !== info.rect.height) {\n      rectCache.width = info.rect.width\n      rectCache.height = info.rect.height\n      composerResizer()\n    }\n  });\n  \n  let bgColor = new THREE.Color(getMeta('bgColor'))\n  \n  Input('onTimeline', (timeline) => {\n    bgColor.set(getMeta('bgColor'))\n    scene.background = bgColor\n    if (timeline.$ready) {\n      bloomPass.threshold = Number(getMeta('threshold'))\n      bloomPass.strength = Number(getMeta('strength')) * timeline.strength.var\n      bloomPass.radius = Number(getMeta('radius'))\n    }\n  });\n  \n});\n\n",
          "meta": [
            {
              "id": "_r751248213",
              "label": "threshold",
              "type": "range",
              "min": "0",
              "max": "1",
              "step": "0.001",
              "value": 0.211
            },
            {
              "id": "_r473085828",
              "label": "strength",
              "type": "range",
              "min": "0",
              "max": "5",
              "step": 0.1,
              "value": 2.4
            },
            {
              "id": "_r47531394",
              "label": "radius",
              "type": "range",
              "min": "0",
              "max": "3",
              "step": "0.01",
              "value": 1
            },
            {
              "id": "_r411700999",
              "label": "bgColor",
              "type": "color",
              "value": "#001750"
            }
          ],
          "_id": "5c2bec864a54460017ee5808",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757module_745027424560",
          "__v": 0
        },
        {
          "pos": {
            "x": 30,
            "y": 30
          },
          "size": {
            "w": 200,
            "h": 40
          },
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2bf1674a54460017ee586c",
          "name": "Timeline",
          "bg": "",
          "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  Input,\n  Output,\n  OutputAll,\n  getMeta\n} = env\n/* esltint-enable */\nconsole.log(`========  ${box.name} is Ready.  ========`)\n// sender\n\nlet startTime = performance.now() / 1000\n\nInput('onFrame', (evt) => {\n  let timeMode = window.top[box.id + '-timeMode']\n  let progress = window.top[box.id + '-progress']\n  // console.log(timeMode)\n  \n  let timetracks = box.meta.filter(e => e.type === 'timeline-track')\n  timetracks.forEach((m, mi) => {\n    let time = 0\n    \n    if (timeMode === 'toEnv') {\n      time = (progress * m.value.totalTime)\n    } else {\n      time = evt.time / 1000 - startTime\n      if (time > m.value.totalTime) {\n        startTime = evt.time / 1000\n      }\n    }\n    \n    updateTimeValue({ time, mVal: m.value, totalTime: m.value.totalTime })\n  })\n  \n  // tell UI\n  if (timetracks.length > 0) {\n    let m = timetracks[0]\n    let time = performance.now() / 1000 - startTime\n    window.top.postMessage({ type: 'timeline', modID: box.id, time, totalTime: m.value.totalTime, progress: time / m.value.totalTime }, window.location.origin)\n  }\n})\n\n\nlet updateTimeValue = ({ time, mVal, totalTime }) => {\n  mVal.time = time\n  \n  // ---------------------------------\n  // periods\n  //  starting\n  if (time >= mVal.start && time <= mVal.afterStart) {\n    let progress = (time - mVal.start) / (mVal.afterStart - mVal.start)\n    mVal.starting = progress\n    mVal.mode = 'starting'\n    mVal.var = progress\n  }\n\n  // periods\n  // during\n  if (time >= mVal.afterStart && time <= mVal.beforeEnd) {\n    let progress = (time - mVal.afterStart) / (mVal.beforeEnd - mVal.afterStart)\n    mVal.during = progress\n    mVal.mode = 'during'\n    mVal.var = 1.0\n  }\n\n  // periods\n  //  leaving\n  if (time >= mVal.beforeEnd && time <= mVal.end) {\n    let progress = 1.0 - (mVal.end - time) / (mVal.end - mVal.beforeEnd)\n    mVal.leaving = 1.0 - progress\n    mVal.mode = 'leaving'\n    mVal.var = 1.0 - progress\n  }\n\n  // ---------------------------------\n\n  // overriders\n  // before start\n  if (time < mVal.start) {\n    let progress = 0\n    mVal.starting = 0\n    mVal.mode = 'beforeStart'\n    mVal.beforeStart = 0\n    mVal.var = 0\n  }\n\n  // after end\n  if (time > mVal.end) {\n    let progress = 0\n    mVal.leaving = 0\n    mVal.afterEnd = 0\n    mVal.mode = 'afterEnd'\n    mVal.var = 0\n  }\n\n  // timebox mVal\n  // timebox\n  if (time >= mVal.start && time <= mVal.end) {\n    let progress = (time - mVal.start) / (mVal.end - mVal.start)\n    mVal.timebox = progress\n  }\n\n  mVal.tick = time / totalTime\n  mVal.now = time\n};\n\nlet event = {\n  $ready: true\n}\nlet toObject = (key) => {\n  event[key] = getMeta(key)\n}\nInput('onFrame', (v) => {\n  box.meta.filter(e => e.type === 'timeline-track').forEach((m, mi) => {\n    toObject(m.label);\n  });\n  \n  OutputAll(event);\n});\n\n\n// this.onClean = () => {\n//   window.cancelAnimationFrame(rAFID);\n//   console.log('onClean', box.id)\n// }\n",
          "meta": [
            {
              "id": "_r1059487130",
              "label": "opacity",
              "type": "timeline-track",
              "value": {
                "start": 0.03749999999999931,
                "afterStart": 3.8858610188261293,
                "beforeEnd": 12.150000000000004,
                "end": 15.037500000000009,
                "totalTime": "15"
              }
            },
            {
              "id": "_r836406453",
              "label": "rate",
              "type": "timeline-track",
              "value": {
                "start": 0,
                "afterStart": 9.094285714285707,
                "beforeEnd": 12,
                "end": 15,
                "totalTime": "15"
              }
            },
            {
              "id": "_r844635908",
              "label": "strength",
              "type": "timeline-track",
              "value": {
                "start": 0,
                "afterStart": 2.479047619047627,
                "beforeEnd": 11.991964285714277,
                "end": 14.99196428571428,
                "totalTime": "15"
              }
            },
            {
              "id": "_r23648488",
              "label": "scaleX",
              "type": "timeline-track",
              "value": {
                "start": 0,
                "afterStart": 3,
                "beforeEnd": 12,
                "end": 15,
                "totalTime": 15
              }
            }
          ],
          "_id": "5c2c34a2efaf8e0017b43a0c",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
          "__v": 0
        },
        {
          "pos": {
            "x": 30,
            "y": 30
          },
          "size": {
            "w": 200,
            "h": 40
          },
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2e730ab5f7ed00178e30ec",
          "name": "Starlight Star Right",
          "bg": "",
          "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  inputs,\n  outputs,\n  getMeta,\n  IO,\n  Input,\n  Output,\n  OutputAll,\n} = env\n\nlet self = this\n\nvar timeline = {};\nvar sliders = {};\n\nResources.ensure(['threejs', 'renderer', 'scene', 'camera']).then(() => {\n  let scene = Resources.get('scene')\n  \n  function starLightGeo () {\n    var geometry = new THREE.BufferGeometry();\n    var rv3 = []\n    var vertices =  [\n    ];\n    let numLiunes = Math.PI * 100\n    let n = numLiunes;\n    let tempV3 = new THREE.Vector3(0,0,0);\n    let temp2V3 = new THREE.Vector3(0,0,0);\n    \n    for (var i = 0; i < n; i++) {\n      let e = i / n;\n      let epi = i / n * Math.PI * 2;\n      let x1 = 300 * (Math.sin(epi) * Math.sin(epi) + -0.5);\n      let y1 = 300 * (Math.sin(epi) * Math.cos(epi));\n      let z1 = -150;\n      \n      let x2 = 500 * (Math.sin(epi) * Math.sin(epi) + -0.5);\n      let y2 = 500 * (Math.sin(epi) * Math.cos(epi));\n      let z2 = 150;\n      \n      tempV3.set(x2, y2, z2);\n      temp2V3.set(0.0, 0.0, 1.0);\n      tempV3.applyAxisAngle(temp2V3, Math.PI * 2.0 * 60 / 360);\n      \n      x2 = tempV3.x\n      y2 = tempV3.y\n      z2 = tempV3.z\n      \n      let r1x = Math.random()\n      let r1y = Math.random()\n      let r1z = Math.random()\n      let r2x = 0\n      let r2y = 0\n      let r2z = 0\n      \n      rv3.push(r1x, r1y, r1z, r2x, r2y, r2z);\n      vertices.push(x1, y1, z1, x2, y2, z2);\n    }\n    \n    geometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(vertices), 3));\n    geometry.addAttribute('randV3', new THREE.BufferAttribute(new Float32Array(rv3), 3));\n    \n    return geometry\n  }\n  \n  var geometry = starLightGeo();//new THREE.SphereBufferGeometry( 100, 100, 16, 16 );\n  let color = new THREE.Color(getMeta('color'));\n  var uniforms = {\n    color: { value: color },\n    progress: { value: 0.0 },\n    opacity: { value: 0.0 }\n  }\n  \n  var material = new THREE.ShaderMaterial({\n    vertexShader: `\n      attribute vec3 randV3;\n      varying vec3 vR3;\n      uniform float progress;\n      void main () {\n        vec4 mvPosition = modelViewMatrix * vec4( position + randV3 * position * progress * 1.0, 1.0 );\n        vec4 outputPos = projectionMatrix * mvPosition;\n        gl_Position = outputPos;\n        \n        vR3 = normalize(randV3);\n        \n        gl_PointSize = 7.7;\n      }`,\n    fragmentShader: `\n      #include <common>\n      \n      uniform vec3 color;\n      uniform float opacity;\n      \n      varying vec3 vR3;\n      \n      void main () {\n        gl_FragColor = vec4(vR3, opacity);\n        \n        \n        // vec2 coord = gl_PointCoord - vec2(0.5);  \n        // if (length(coord) >= 0.5) {\n        //   discard;\n        // } else {\n        //   gl_FragColor = vec4(color, opacity);\n        // }\n      }\n    `,\n    uniforms,\n    transparent: true \n  });\n  var cube = new THREE.LineSegments( geometry, material );\n  \n  Input('onTimeline', () => {}, () => {\n    scene.add(cube)\n  });\n  \n  Input('onTimeline', () => {\n    color.set(getMeta('color'))\n    material.needsUpdate = true\n  });\n  \n  // 0 = render\n  Input('onTimeline', (accessor) => {\n    let speed = 0\n    timeline = accessor\n   \n    uniforms.opacity.value = timeline.opacity.var;\n    uniforms.progress.value = timeline.opacity.timebox;\n    \n    // cube.rotation.x = (timeline.rate.now) * 0.0 * 3.14// * (sliders.rotateX) || 0\n    // cube.rotation.y = (timeline.rate.now) * 0.2 * 3.14// * (sliders.rotateY) || 0\n    // cube.rotation.z = (timeline.rate.now) * 0.0 * 3.14// * (sliders.rotateZ) || 0\n  \n    // cube.position.x = Math.sin(timeline.rate.now) * 100// + sliders.translateX\n    cube.position.y = 0 || 0\n    cube.position.z = 0 || 0\n  \n    cube.scale.x = 1.0;\n    cube.scale.y = 1.0;\n    cube.scale.z = 1.0;\n \n    Output('onTimeline', accessor)\n\t});\n\t\n\tInput('uiControls', (accessor) => {\n  \t//sliders = accessor\n  });\n  \n  \n  this.onClean = () => {\n    scene.remove(cube);\n    console.log('onClean', box.id)\n  }\n  \n});\n\n",
          "meta": [
            {
              "id": "_r174941373",
              "label": "color",
              "type": "color",
              "value": "#f1ce4b"
            }
          ],
          "_id": "5c2e83aba2a2ac00177a613a",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2e730ab5f7ed00178e30b8module_332674900834",
          "__v": 0
        },
        {
          "pos": {
            "x": 30,
            "y": 30
          },
          "size": {
            "w": 200,
            "h": 40
          },
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2e730ab5f7ed00178e30eb",
          "name": "彩雲追月 Particle Sea Object",
          "bg": "",
          "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  inputs,\n  outputs,\n  getMeta,\n  IO,\n  Input,\n  Output,\n  OutputAll,\n} = env\n\nlet self = this\n\nvar timeline = {};\nvar sliders = {};\n\nResources.js.need('gpgpu', [\n  'https://threejs.org/examples/js/GPUComputationRenderer.js'\n]);\n\nvar particleVelocityShader = `\n#include <common>\n\nuniform vec2 mousePos;\n\nfloat constrain(float val, float min, float max) {\n    if (val < min) {\n        return min;\n    } else if (val > max) {\n        return max;\n    } else {\n        return val;\n    }\n}\n\nvec3 getDiff (in vec3 lastPos, in vec3 mousePos) {\n  vec3 diff = lastPos.xyz / 33.3 - mousePos;\n  float distance = constrain(length(diff), 5.0, 100.0);\n  float strength = 0.35 / (distance * distance);\n\n  diff = normalize(diff);\n  // delta\n  diff = diff * strength * -2.0;\n  // diff = diff * strength * (-20.83) * (1.0 / delta) * 0.0183;\n\n  return diff;\n}\n\n\nvoid main()\t{\n  vec2 cellSize = 1.0 / resolution.xy;\n  vec2 uv = gl_FragCoord.xy * cellSize;\n\n  vec4 lastPos = texture2D( positionInfo, uv );\n  vec4 lastVel = texture2D( velocityInfo, uv );\n\n\n  vec3 diff = getDiff( lastPos.xyz, vec3(mousePos, 0.1) );\n\n  lastVel.xyz += diff;\n\n  gl_FragColor = lastVel;\n}\n\n\n`\nvar particlePositionShader = `\n\n#include <common>\n\nuniform vec2 mousePos;\n\n//  Classic Perlin 3D Noise\n//  by Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec2 fade(vec2 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec2 P){\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n  vec4 i = permute(permute(ix) + iy);\n  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n  vec4 gy = abs(gx) - 0.5;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n  vec4 norm = 1.79284291400159 - 0.85373472095314 *\n      vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n#define M_PI 3.1415926535897932384626433832795\nfloat atan2(in float y, in float x) {\n\tbool xgty = (abs(x) > abs(y));\n\treturn mix(M_PI/2.0 - atan(x,y), atan(y,x), float(xgty));\n}\nvec3 fromBall(float r, float az, float el) {\n\treturn vec3(\n    r * cos(el) * cos(az),\n    r * cos(el) * sin(az),\n    r * sin(el)\n  );\n}\nvoid toBall(vec3 pos, out float az, out float el) {\n\taz = atan2(pos.y, pos.x);\n\tel = atan2(pos.z, sqrt(pos.x * pos.x + pos.y * pos.y));\n}\n// float az = 0.0;\n// float el = 0.0;\n// vec3 noiser = vec3(lastVel);\n// toBall(noiser, az, el);\n// lastVel.xyz = fromBall(1.0, az, el);\n\nvoid main()\t{\n  vec2 cellSize = 1.0 / resolution.xy;\n  vec2 uv = gl_FragCoord.xy * cellSize;\n\n  vec4 lastVel = texture2D( velocityInfo, uv );\n  vec4 lastPos = texture2D( positionInfo, uv );\n\n  float noisiness = 9.0;\n\n  float az = 0.0;\n  float el = 0.0;\n\n  vec3 noiser = vec3(lastPos) + cnoise(vec2(lastVel * noisiness)) * noisiness * 0.5;\n  toBall(noiser, az, el);\n  if (rand(lastVel.xy) > 0.33333) {\n    lastPos.xyz = fromBall(75.0, az, el);\n  } else {\n    lastPos.xyz += fromBall(-6.0, az, el);\n  }\n\n  lastPos.xyz += lastVel.xyz * noisiness;\n  gl_FragColor = lastPos;\n}\n\n`\n\nvar particleVertexShader = `\n#include <common>\n\nuniform sampler2D positionInfo;\nuniform sampler2D velocityInfo;\n\nvarying vec4 particleVel;\n\n\n// #define M_PI 3.1415926535897932384626433832795\n\n// float atan2(in float y, in float x) {\n// \tbool xgty = (abs(x) > abs(y));\n// \treturn mix(M_PI/2.0 - atan(x,y), atan(y,x), float(xgty));\n// }\n\n// vec3 fromBall(float r, float az, float el) {\n// \treturn vec3(\n//     r * cos(el) * cos(az),\n//     r * cos(el) * sin(az),\n//     r * sin(el)\n//   );\n// }\n\n// void toBall(vec3 pos, out float az, out float el) {\n// \taz = atan2(pos.y, pos.x);\n// \tel = atan2(pos.z, sqrt(pos.x * pos.x + pos.y * pos.y));\n// }\n\n\nuniform float pointSize;\n\nvoid main() {\n  vec2 cellSize = vec2( 1.0 / WIDTH, 1.0 / WIDTH );\n  #include <uv_vertex>\n\n  // vec3 objectNormal = vec3(\n  //   ( texture2D( fireworkPosition, uv + vec2( - cellSize.x, 0 ) ).x - texture2D( fireworkPosition, uv + vec2( cellSize.x, 0 ) ).x ) * WIDTH / BOUNDS,\n  //   ( texture2D( fireworkPosition, uv + vec2( 0, - cellSize.y ) ).x - texture2D( fireworkPosition, uv + vec2( 0, cellSize.y ) ).x ) * WIDTH / BOUNDS,\n  //   1.0 );\n\n  vec3 objectNormal = vec3(1.0);\n\n  vec4 fireworkCoord = texture2D( positionInfo, uv );\n  particleVel = texture2D( velocityInfo, uv );\n\n  vec3 transformed = vec3( fireworkCoord.x, fireworkCoord.y, fireworkCoord.z );\n\n  gl_PointSize = pointSize;\n\n  // float az = 0.0;\n  // float el = 0.0;\n  // vec3 noiser = transformed;\n  // toBall(noiser, az, el);\n  // vec3 newPos = fromBall(70.0, az, el);\n\n  vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n  vec4 outputPos = projectionMatrix * mvPosition;\n\n  gl_Position = outputPos;\n\n}\n\n`\nvar particleFragmentShader = `\n#include <common>\n\nuniform vec3 mixColor;\nuniform float opacity;\n\nvarying vec4 particleVel;\n\nvoid main() {\n\n  vec4 rainbow = particleVel;\n\n  vec4 outputColor = vec4(\n  \trainbow.x + 0.6,\n  \t(rainbow.y * rainbow.x) + 0.6,\n  \trainbow.y + 0.6,\n    opacity\n  ) * vec4(mixColor, 1.0);\n\n  gl_FragColor = outputColor;\n\n  // gl_FragColor = vec4( vec3(0.0,0.0,1.0) , 0.5);\n}\n\n`\n/* eslint-enable */\n\nfunction particleSea () {\n  var api = {}\n\n  var WIDTH = 256\n  var BOUNDS = 256\n\n  var gpuCompute\n  var positionVariable\n  var velocityVariable\n  var particleShader\n\n  function fillTexture (texture) {\n    // var waterMaxHeight = 10\n    // function noise(x, y, z) {\n    //   var multR = waterMaxHeight\n    //   var mult = 0.025\n    //   var r = 0\n    //   for (var i = 0; i < 15; i++) {\n    //     r += multR * simplex.noise(x * mult, y * mult)\n    //     multR *= 0.53 + 0.025 * i\n    //     mult *= 1.25\n    //   }\n    //   return r\n    // }\n    var pixels = texture.image.data\n    var p = 0\n    for (var j = 0; j < WIDTH; j++) {\n      for (var i = 0; i < WIDTH; i++) {\n        var x = (WIDTH / 2 - i) * 128 / WIDTH\n        var y = (WIDTH / 2 - j) * 128 / WIDTH\n\n        pixels[ p + 0 ] = x\n        pixels[ p + 1 ] = y\n\n        pixels[ p + 2 ] = 0// noise(Math.sin(x), Math.sin(y), 0.0)\n        // pixels[ p + 1 ] = 0\n        // pixels[ p + 2 ] = 0\n        pixels[ p + 3 ] = 0\n        p += 4\n      }\n    }\n  }\n\n  function setupCompute ({ renderer }) {\n    gpuCompute = new GPUComputationRenderer(WIDTH, WIDTH, renderer)\n\n    var positionTexture = gpuCompute.createTexture()\n    fillTexture(positionTexture)\n    positionVariable = gpuCompute.addVariable('positionInfo', particlePositionShader, positionTexture)\n    positionVariable.material.uniforms.mousePos = {\n      value: new THREE.Vector2(0, 0)\n    }\n\n    var velocityTexture = gpuCompute.createTexture()\n    velocityVariable = gpuCompute.addVariable('velocityInfo', particleVelocityShader, velocityTexture)\n    velocityVariable.material.defines.BOUNDS = BOUNDS.toFixed(1)\n    velocityVariable.wrapS = THREE.ClampToEdgeWrapping\n    velocityVariable.wrapT = THREE.ClampToEdgeWrapping\n    velocityVariable.material.uniforms.mousePos = {\n      value: new THREE.Vector2(0, 0)\n    }\n\n    api.setMouse = ({ mX, mY, rect }) => {\n      var posMouse = velocityVariable.material.uniforms.mousePos.value\n      var velMouse = positionVariable.material.uniforms.mousePos.value\n      if (rect && typeof mX !== 'undefined' && typeof mY !== 'undefined') {\n        velMouse.x = ((mX - rect.left) / rect.width) * 2 - 1\n        velMouse.y = -((mY - rect.top) / rect.height) * 2 + 1\n        posMouse.x = ((mX - rect.left) / rect.width) * 2 - 1\n        posMouse.y = -((mY - rect.top) / rect.height) * 2 + 1\n\n        velMouse.y *= rect.width / rect.height\n        posMouse.y *= rect.width / rect.height\n        // console.log(mouse)\n      }\n    }\n\n    gpuCompute.setVariableDependencies(positionVariable, [positionVariable, velocityVariable])\n    gpuCompute.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable])\n\n    var error = gpuCompute.init()\n    if (error !== null) {\n      console.error(error)\n    }\n    return {}\n  }\n\n  function setupScene () {\n    var material = particleShader = new THREE.ShaderMaterial({\n      blending: THREE.AdditiveBlending,\n      depthTest: false,\n      transparent: true,\n      uniforms: {\n        positionInfo: {\n          value: null\n        },\n        velocityInfo: {\n          value: null\n        },\n        mixColor: {\n          value: new THREE.Color(0xffffff)\n        },\n        opacity: {\n          value: 0.14\n        },\n        pointSize: {\n          value: 1.0\n        }\n      },\n      vertexShader: particleVertexShader,\n      fragmentShader: particleFragmentShader // THREE.ShaderChunk[ 'meshphong_frag' ]\n    })\n\n    material.defines.WIDTH = WIDTH.toFixed(1)\n    material.defines.BOUNDS = BOUNDS.toFixed(1)\n\n    var geometry = new THREE.PlaneBufferGeometry(BOUNDS, BOUNDS, WIDTH - 1, WIDTH - 1)\n    var points = new THREE.Points(geometry, material)\n    // points = new THREE.Points( geometry, material );\n    // points.rotation.x = -Math.PI / 2 * 0;\n    //points.matrixAutoUpdate = false\n    //points.updateMatrix()\n\n    return {\n      updateColor (v) {\n        material.uniforms.mixColor.value.set(v)\n      },\n      updateOpacity (v) {\n        material.uniforms.opacity.value = v\n      },\n      updatePointSize (v) {\n        material.uniforms.pointSize.value = v\n      },\n      points\n    }\n  }\n\n  function setup ({ renderer }) {\n    setupCompute({ renderer })\n    let scn = setupScene()\n    Object.keys(scn).forEach(kn => {\n      api[kn] = scn[kn]\n    })\n    return api\n  }\n  api.setup = setup\n\n  function render () {\n    // @.@\n    particleShader.uniforms.positionInfo.value = gpuCompute.getCurrentRenderTarget(positionVariable).texture\n    particleShader.uniforms.velocityInfo.value = gpuCompute.getCurrentRenderTarget(velocityVariable).texture\n    gpuCompute.compute()\n  }\n  api.render = render\n\n  return api\n}\n\nResources.ensure(['threejs', 'renderer', 'scene', 'camera', 'gpgpu']).then(() => {\n  let scene = Resources.get('scene');\n  let renderer = Resources.get('renderer');\n  let rootDOM = Resources.get('rootDOM');\n  let camera = Resources.get('camera');\n  \n  let api = particleSea();\n  api.setup({ renderer });\n  \n  let rect = rootDOM.getBoundingClientRect();\n  \n  Input('onTimeline', () => {\n    api.updateColor(getMeta('mixColor'));\n    api.updateOpacity(getMeta('opacity'));\n    api.updatePointSize(getMeta('pointSize'));\n    \n    rect = rootDOM.getBoundingClientRect();\n  }, () => {\n  });\n  \n  rootDOM.addEventListener('mousemove', (evt) => {\n    api.setMouse({ mX: evt.pageX, mY: evt.pageY, rect });\n  }, false);\n  \n  Input('onTimeline', (timeline) => {\n    api.render();\n    OutputAll(timeline)\n  }, () => {\n    setTimeout(() => {\n      scene.add(api.points);\n      //api.points.rotation.y = Math.PI * 0.5;\n      camera.position.z = 25;\n      camera.position.y = 75;\n    }, 150)\n  });\n  \n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          "meta": [
            {
              "id": "_r757809391",
              "label": "mixColor",
              "type": "color",
              "value": "#f3fdf8"
            },
            {
              "id": "_r362955315",
              "label": "opacity",
              "type": "range",
              "min": "0",
              "max": "1",
              "step": "0.01",
              "value": 0.2
            },
            {
              "id": "_r490526344",
              "label": "pointSize",
              "type": "range",
              "min": "0",
              "max": "3",
              "step": "0.01",
              "value": 1.06
            }
          ],
          "_id": "5c2e73cab5f7ed00178e30ee",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2e730ab5f7ed00178e30b8module_654191274205",
          "__v": 0
        },
        {
          "pos": {
            "x": 30,
            "y": 30
          },
          "size": {
            "w": 200,
            "h": 40
          },
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2c4043f5aaf90017377b95",
          "name": "煙火噴 Nova Blaster",
          "bg": "",
          "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  inputs,\n  outputs,\n  getMeta,\n  IO,\n  Input,\n  Output,\n  OutputAll,\n} = env\n\nlet self = this\n\nvar timeline = {};\nvar sliders = {};\n\nResources.js.need('gpgpu', [\n  'https://threejs.org/examples/js/GPUComputationRenderer.js'\n]);\n\nvar particleVelocityShader = `\n#include <common>\n\nuniform vec2 mousePos;\n\nfloat constrain(float val, float min, float max) {\n    if (val < min) {\n        return min;\n    } else if (val > max) {\n        return max;\n    } else {\n        return val;\n    }\n}\n\nvec3 getDiff (in vec3 lastPos, in vec3 mousePos) {\n  vec3 diff = lastPos.xyz / 33.3 - mousePos;\n  float distance = constrain(length(diff), 5.0, 100.0);\n  float strength = 0.35 / (distance * distance);\n\n  diff = normalize(diff);\n  // delta\n  diff = diff * strength * -2.0;\n  // diff = diff * strength * (-20.83) * (1.0 / delta) * 0.0183;\n\n  return diff;\n}\n\n\nvoid main()\t{\n  vec2 cellSize = 1.0 / resolution.xy;\n  vec2 uv = gl_FragCoord.xy * cellSize;\n\n  vec4 lastPos = texture2D( positionInfo, uv );\n  vec4 lastVel = texture2D( velocityInfo, uv );\n\n\n  vec3 diff = getDiff( lastPos.xyz, vec3(mousePos, 0.1) );\n\n  lastVel.xyz += diff;\n\n  gl_FragColor = lastVel;\n}\n\n\n`\nvar particlePositionShader = `\n\n#include <common>\n\nuniform vec2 mousePos;\n\n//  Classic Perlin 3D Noise\n//  by Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec2 fade(vec2 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec2 P){\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n  vec4 i = permute(permute(ix) + iy);\n  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n  vec4 gy = abs(gx) - 0.5;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n  vec4 norm = 1.79284291400159 - 0.85373472095314 *\n      vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n#define M_PI 3.1415926535897932384626433832795\nfloat atan2(in float y, in float x) {\n\tbool xgty = (abs(x) > abs(y));\n\treturn mix(M_PI/2.0 - atan(x,y), atan(y,x), float(xgty));\n}\nvec3 fromBall(float r, float az, float el) {\n\treturn vec3(\n    r * cos(el) * cos(az),\n    r * cos(el) * sin(az),\n    r * sin(el)\n  );\n}\nvoid toBall(vec3 pos, out float az, out float el) {\n\taz = atan2(pos.y, pos.x);\n\tel = atan2(pos.z, sqrt(pos.x * pos.x + pos.y * pos.y));\n}\n// float az = 0.0;\n// float el = 0.0;\n// vec3 noiser = vec3(lastVel);\n// toBall(noiser, az, el);\n// lastVel.xyz = fromBall(1.0, az, el);\n\nvoid main()\t{\n  vec2 cellSize = 1.0 / resolution.xy;\n  vec2 uv = gl_FragCoord.xy * cellSize;\n\n  vec4 lastVel = texture2D( velocityInfo, uv );\n  vec4 lastPos = texture2D( positionInfo, uv );\n\n  float noisiness = 9.0;\n\n  float az = 0.0;\n  float el = 0.0;\n\n  vec3 noiser = vec3(lastPos) + cnoise(vec2(lastVel * noisiness)) * noisiness * 0.5;\n  toBall(noiser, az, el);\n  if (rand(lastVel.xy) > 0.33333) {\n    lastPos.xyz = fromBall(75.0, az, el);\n  } else {\n    lastPos.xyz += fromBall(-6.0, az, el);\n  }\n\n  lastPos.xyz += lastVel.xyz * noisiness;\n  gl_FragColor = lastPos;\n}\n\n`\n\nvar particleVertexShader = `\n#include <common>\n\nuniform sampler2D positionInfo;\nuniform sampler2D velocityInfo;\n\nvarying vec4 particleVel;\n\n\n// #define M_PI 3.1415926535897932384626433832795\n\n// float atan2(in float y, in float x) {\n// \tbool xgty = (abs(x) > abs(y));\n// \treturn mix(M_PI/2.0 - atan(x,y), atan(y,x), float(xgty));\n// }\n\n// vec3 fromBall(float r, float az, float el) {\n// \treturn vec3(\n//     r * cos(el) * cos(az),\n//     r * cos(el) * sin(az),\n//     r * sin(el)\n//   );\n// }\n\n// void toBall(vec3 pos, out float az, out float el) {\n// \taz = atan2(pos.y, pos.x);\n// \tel = atan2(pos.z, sqrt(pos.x * pos.x + pos.y * pos.y));\n// }\n\n\nuniform float pointSize;\n\nvoid main() {\n  vec2 cellSize = vec2( 1.0 / WIDTH, 1.0 / WIDTH );\n  #include <uv_vertex>\n\n  // vec3 objectNormal = vec3(\n  //   ( texture2D( fireworkPosition, uv + vec2( - cellSize.x, 0 ) ).x - texture2D( fireworkPosition, uv + vec2( cellSize.x, 0 ) ).x ) * WIDTH / BOUNDS,\n  //   ( texture2D( fireworkPosition, uv + vec2( 0, - cellSize.y ) ).x - texture2D( fireworkPosition, uv + vec2( 0, cellSize.y ) ).x ) * WIDTH / BOUNDS,\n  //   1.0 );\n\n  vec3 objectNormal = vec3(1.0);\n\n  vec4 fireworkCoord = texture2D( positionInfo, uv );\n  particleVel = texture2D( velocityInfo, uv );\n\n  vec3 transformed = vec3( fireworkCoord.x, fireworkCoord.y, fireworkCoord.z );\n\n  gl_PointSize = pointSize;\n\n  // float az = 0.0;\n  // float el = 0.0;\n  // vec3 noiser = transformed;\n  // toBall(noiser, az, el);\n  // vec3 newPos = fromBall(70.0, az, el);\n\n  vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n  vec4 outputPos = projectionMatrix * mvPosition;\n\n  gl_Position = outputPos;\n\n}\n\n`\nvar particleFragmentShader = `\n#include <common>\n\nuniform vec3 mixColor;\nuniform float opacity;\n\nvarying vec4 particleVel;\n\nvoid main() {\n\n  vec4 rainbow = particleVel;\n\n  vec4 outputColor = vec4(\n  \trainbow.x + 0.6,\n  \t(rainbow.y * rainbow.x) + 0.6,\n  \trainbow.y + 0.6,\n    opacity\n  ) * vec4(mixColor, 1.0);\n\n  gl_FragColor = outputColor;\n\n  // gl_FragColor = vec4( vec3(0.0,0.0,1.0) , 0.5);\n}\n\n`\n/* eslint-enable */\n\nfunction particleSea () {\n  var api = {}\n\n  var WIDTH = 256\n  var BOUNDS = 256\n\n  var gpuCompute\n  var positionVariable\n  var velocityVariable\n  var particleShader\n\n  function fillTexture (texture) {\n    // var waterMaxHeight = 10\n    // function noise(x, y, z) {\n    //   var multR = waterMaxHeight\n    //   var mult = 0.025\n    //   var r = 0\n    //   for (var i = 0; i < 15; i++) {\n    //     r += multR * simplex.noise(x * mult, y * mult)\n    //     multR *= 0.53 + 0.025 * i\n    //     mult *= 1.25\n    //   }\n    //   return r\n    // }\n    var pixels = texture.image.data\n    var p = 0\n    for (var j = 0; j < WIDTH; j++) {\n      for (var i = 0; i < WIDTH; i++) {\n        var x = (WIDTH / 2 - i) * 128 / WIDTH\n        var y = (WIDTH / 2 - j) * 128 / WIDTH\n\n        pixels[ p + 0 ] = x\n        pixels[ p + 1 ] = y\n\n        pixels[ p + 2 ] = 0// noise(Math.sin(x), Math.sin(y), 0.0)\n        // pixels[ p + 1 ] = 0\n        // pixels[ p + 2 ] = 0\n        pixels[ p + 3 ] = 0\n        p += 4\n      }\n    }\n  }\n\n  function setupCompute ({ renderer }) {\n    gpuCompute = new GPUComputationRenderer(WIDTH, WIDTH, renderer)\n\n    var positionTexture = gpuCompute.createTexture()\n    fillTexture(positionTexture)\n    positionVariable = gpuCompute.addVariable('positionInfo', particlePositionShader, positionTexture)\n    positionVariable.material.uniforms.mousePos = {\n      value: new THREE.Vector2(0, 0)\n    }\n\n    var velocityTexture = gpuCompute.createTexture()\n    velocityVariable = gpuCompute.addVariable('velocityInfo', particleVelocityShader, velocityTexture)\n    velocityVariable.material.defines.BOUNDS = BOUNDS.toFixed(1)\n    velocityVariable.wrapS = THREE.ClampToEdgeWrapping\n    velocityVariable.wrapT = THREE.ClampToEdgeWrapping\n    velocityVariable.material.uniforms.mousePos = {\n      value: new THREE.Vector2(0, 0)\n    }\n\n    api.setMouse = ({ mX, mY, rect }) => {\n      var posMouse = velocityVariable.material.uniforms.mousePos.value\n      var velMouse = positionVariable.material.uniforms.mousePos.value\n      if (rect && typeof mX !== 'undefined' && typeof mY !== 'undefined') {\n        velMouse.x = ((mX - rect.left) / rect.width) * 2 - 1\n        velMouse.y = -((mY - rect.top) / rect.height) * 2 + 1\n        posMouse.x = ((mX - rect.left) / rect.width) * 2 - 1\n        posMouse.y = -((mY - rect.top) / rect.height) * 2 + 1\n\n        velMouse.y *= rect.width / rect.height\n        posMouse.y *= rect.width / rect.height\n        // console.log(mouse)\n      }\n    }\n\n    gpuCompute.setVariableDependencies(positionVariable, [positionVariable, velocityVariable])\n    gpuCompute.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable])\n\n    var error = gpuCompute.init()\n    if (error !== null) {\n      console.error(error)\n    }\n    return {}\n  }\n\n  function setupScene () {\n    var material = particleShader = new THREE.ShaderMaterial({\n      blending: THREE.AdditiveBlending,\n      depthTest: false,\n      transparent: true,\n      uniforms: {\n        positionInfo: {\n          value: null\n        },\n        velocityInfo: {\n          value: null\n        },\n        mixColor: {\n          value: new THREE.Color(0xffffff)\n        },\n        opacity: {\n          value: 0.14\n        },\n        pointSize: {\n          value: 1.0\n        }\n      },\n      vertexShader: particleVertexShader,\n      fragmentShader: particleFragmentShader // THREE.ShaderChunk[ 'meshphong_frag' ]\n    })\n\n    material.defines.WIDTH = WIDTH.toFixed(1)\n    material.defines.BOUNDS = BOUNDS.toFixed(1)\n\n    var geometry = new THREE.PlaneBufferGeometry(BOUNDS, BOUNDS, WIDTH - 1, WIDTH - 1)\n    var points = new THREE.Points(geometry, material)\n    // points = new THREE.Points( geometry, material );\n    // points.rotation.x = -Math.PI / 2 * 0;\n    //points.matrixAutoUpdate = false\n    //points.updateMatrix()\n\n    return {\n      updateColor (v) {\n        material.uniforms.mixColor.value.set(v)\n      },\n      updateOpacity (v) {\n        material.uniforms.opacity.value = v\n      },\n      updatePointSize (v) {\n        material.uniforms.pointSize.value = v\n      },\n      points\n    }\n  }\n\n  function setup ({ renderer }) {\n    setupCompute({ renderer })\n    let scn = setupScene()\n    Object.keys(scn).forEach(kn => {\n      api[kn] = scn[kn]\n    })\n    return api\n  }\n  api.setup = setup\n\n  function render () {\n    // @.@\n    particleShader.uniforms.positionInfo.value = gpuCompute.getCurrentRenderTarget(positionVariable).texture\n    particleShader.uniforms.velocityInfo.value = gpuCompute.getCurrentRenderTarget(velocityVariable).texture\n    gpuCompute.compute()\n  }\n  api.render = render\n\n  return api\n}\n\nResources.ensure(['threejs', 'renderer', 'scene', 'camera', 'gpgpu']).then(() => {\n  let scene = Resources.get('scene');\n  let renderer = Resources.get('renderer');\n  let rootDOM = Resources.get('rootDOM');\n  let camera = Resources.get('camera');\n  \n  let api = particleSea();\n  api.setup({ renderer });\n  \n  let rect = rootDOM.getBoundingClientRect();\n  \n  Input('onTimeline', () => {\n    api.updateColor(getMeta('mixColor'));\n    api.updateOpacity(getMeta('opacity'));\n    api.updatePointSize(getMeta('pointSize'));\n    \n    rect = rootDOM.getBoundingClientRect();\n  }, () => {\n  });\n  \n  rootDOM.addEventListener('mousemove', (evt) => {\n    api.setMouse({ mX: evt.pageX, mY: evt.pageY, rect });\n  }, false);\n  \n  Input('onTimeline', (timeline) => {\n    api.render();\n    OutputAll(timeline)\n  }, () => {\n    setTimeout(() => {\n      scene.add(api.points);\n      //api.points.rotation.y = Math.PI * 0.5;\n      camera.position.z = 25;\n      camera.position.y = 75;\n    }, 150)\n  });\n  \n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          "meta": [
            {
              "id": "_r757809391",
              "label": "mixColor",
              "type": "color",
              "value": "#f3fdf8"
            },
            {
              "id": "_r362955315",
              "label": "opacity",
              "type": "range",
              "min": "0",
              "max": "1",
              "step": "0.01",
              "value": 0.2
            },
            {
              "id": "_r490526344",
              "label": "pointSize",
              "type": "range",
              "min": "0",
              "max": "3",
              "step": "0.01",
              "value": 1.06
            }
          ],
          "_id": "5c308b7dcd5a5f0f21117274",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2c4043f5aaf90017377b62module_950943352397",
          "__v": 0
        },
        {
          "pos": {
            "x": 30,
            "y": 30
          },
          "size": {
            "w": 200,
            "h": 40
          },
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c34877026d465001733cad1",
          "name": "SuperWarm",
          "bg": "",
          "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  inputs,\n  outputs,\n  getMeta,\n  IO,\n  Input,\n  Output,\n  OutputAll,\n} = env\n\nlet self = this\n\nvar timeline = {};\nvar sliders = {};\n\nResources.js.need('gpgpu', [\n  'https://threejs.org/examples/js/GPUComputationRenderer.js'\n]);\n\nvar particleVelocityShader = `\n#include <common>\n\nuniform vec2 mousePos;\n\nfloat constrain(float val, float min, float max) {\n    if (val < min) {\n        return min;\n    } else if (val > max) {\n        return max;\n    } else {\n        return val;\n    }\n}\n\nvec3 getDiff (in vec3 lastPos, in vec3 mousePos) {\n  vec3 diff = lastPos.xyz / 33.3 - mousePos;\n  float distance = constrain(length(diff), 5.0, 100.0);\n  float strength = 0.35 / (distance * distance);\n\n  diff = normalize(diff);\n  // delta\n  diff = diff * strength * -2.0;\n  // diff = diff * strength * (-20.83) * (1.0 / delta) * 0.0183;\n\n  return diff;\n}\n\n\nvoid main()\t{\n  vec2 cellSize = 1.0 / resolution.xy;\n  vec2 uv = gl_FragCoord.xy * cellSize;\n\n  vec4 lastPos = texture2D( positionInfo, uv );\n  vec4 lastVel = texture2D( velocityInfo, uv );\n\n\n  vec3 diff = getDiff( lastPos.xyz, vec3(mousePos, 0.1) );\n\n  lastVel.xyz += diff;\n\n  gl_FragColor = lastVel;\n}\n\n\n`\nvar particlePositionShader = `\n\n#include <common>\n\nuniform vec2 mousePos;\n\n//  Classic Perlin 3D Noise\n//  by Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec2 fade(vec2 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec2 P){\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n  vec4 i = permute(permute(ix) + iy);\n  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n  vec4 gy = abs(gx) - 0.5;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n  vec4 norm = 1.79284291400159 - 0.85373472095314 *\n      vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n#define M_PI 3.1415926535897932384626433832795\nfloat atan2(in float y, in float x) {\n\tbool xgty = (abs(x) > abs(y));\n\treturn mix(M_PI/2.0 - atan(x,y), atan(y,x), float(xgty));\n}\nvec3 fromBall(float r, float az, float el) {\n\treturn vec3(\n    r * cos(el) * cos(az),\n    r * cos(el) * sin(az),\n    r * sin(el)\n  );\n}\nvoid toBall(vec3 pos, out float az, out float el) {\n\taz = atan2(pos.y, pos.x);\n\tel = atan2(pos.z, sqrt(pos.x * pos.x + pos.y * pos.y));\n}\n// float az = 0.0;\n// float el = 0.0;\n// vec3 noiser = vec3(lastVel);\n// toBall(noiser, az, el);\n// lastVel.xyz = fromBall(1.0, az, el);\n\nvoid main()\t{\n  vec2 cellSize = 1.0 / resolution.xy;\n  vec2 uv = gl_FragCoord.xy * cellSize;\n\n  vec4 lastVel = texture2D( velocityInfo, uv );\n  vec4 lastPos = texture2D( positionInfo, uv );\n\n  float noisiness = 8.0;\n\n  float az = 0.0;\n  float el = 0.0;\n\n  vec3 noiser = vec3(lastPos) + cnoise(vec2(lastVel * noisiness)) * noisiness * 0.1;\n  toBall(noiser, az, el);\n  \n  lastPos.xyz = fromBall(75.0, az, el);\n\n  lastPos.xyz += lastVel.xyz * noisiness;\n  gl_FragColor = lastPos;\n}\n\n`\n\nvar particleVertexShader = `\n#include <common>\n\nuniform sampler2D positionInfo;\nuniform sampler2D velocityInfo;\n\nattribute vec3 htV3;\nattribute vec3 randV3;\n\nvarying vec4 particleVel;\n\n\n// #define M_PI 3.1415926535897932384626433832795\n\n// float atan2(in float y, in float x) {\n// \tbool xgty = (abs(x) > abs(y));\n// \treturn mix(M_PI/2.0 - atan(x,y), atan(y,x), float(xgty));\n// }\n\n// vec3 fromBall(float r, float az, float el) {\n// \treturn vec3(\n//     r * cos(el) * cos(az),\n//     r * cos(el) * sin(az),\n//     r * sin(el)\n//   );\n// }\n\n// void toBall(vec3 pos, out float az, out float el) {\n// \taz = atan2(pos.y, pos.x);\n// \tel = atan2(pos.z, sqrt(pos.x * pos.x + pos.y * pos.y));\n// }\n\n\nuniform float pointSize;\n\nvoid main() {\n  vec2 cellSize = vec2( 1.0 / WIDTH, 1.0 / WIDTH );\n  #include <uv_vertex>\n\n  // vec3 objectNormal = vec3(\n  //   ( texture2D( fireworkPosition, uv + vec2( - cellSize.x, 0 ) ).x - texture2D( fireworkPosition, uv + vec2( cellSize.x, 0 ) ).x ) * WIDTH / BOUNDS,\n  //   ( texture2D( fireworkPosition, uv + vec2( 0, - cellSize.y ) ).x - texture2D( fireworkPosition, uv + vec2( 0, cellSize.y ) ).x ) * WIDTH / BOUNDS,\n  //   1.0 );\n\n  vec3 objectNormal = vec3(1.0);\n\n  vec4 fireworkCoord = texture2D( positionInfo, uv );\n  vec4 velocityAmount = texture2D( velocityInfo, uv );\n  particleVel = velocityAmount;\n  \n  vec3 newPos = vec3( fireworkCoord.x, fireworkCoord.y, fireworkCoord.z );\n  vec3 transformed = newPos + newPos * htV3;\n  \n  // if (htV3.x == 1.0) {\n  //   newPos = newPos - vec3(velocityAmount);\n  // }\n  \n  gl_PointSize = pointSize;\n\n  // float az = 0.0;\n  // float el = 0.0;\n  // vec3 noiser = transformed;\n  // toBall(noiser, az, el);\n  // vec3 newPos = fromBall(70.0, az, el);\n\n  vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n  vec4 outputPos = projectionMatrix * mvPosition;\n\n  gl_Position = outputPos;\n\n}\n\n`\nvar particleFragmentShader = `\n#include <common>\n\nuniform vec3 mixColor;\nuniform float opacity;\n\nvarying vec4 particleVel;\n\nvoid main() {\n\n  vec4 rainbow = particleVel;\n\n  vec4 outputColor = vec4(\n  \trainbow.x + 0.6,\n  \t(rainbow.y * rainbow.x) + 0.6,\n  \trainbow.y + 0.6,\n    opacity\n  ) * vec4(mixColor, 1.0);\n\n  gl_FragColor = outputColor;\n\n  // gl_FragColor = vec4( vec3(0.0,0.0,1.0) , 0.5);\n}\n\n`\n/* eslint-enable */\n\nfunction particleSea () {\n  var api = {}\n\n  var WIDTH = 256\n  var BOUNDS = 256\n\n  var gpuCompute\n  var positionVariable\n  var velocityVariable\n  var particleShader\n\n  function fillTexture (texture) {\n    // var waterMaxHeight = 10\n    // function noise(x, y, z) {\n    //   var multR = waterMaxHeight\n    //   var mult = 0.025\n    //   var r = 0\n    //   for (var i = 0; i < 15; i++) {\n    //     r += multR * simplex.noise(x * mult, y * mult)\n    //     multR *= 0.53 + 0.025 * i\n    //     mult *= 1.25\n    //   }\n    //   return r\n    // }\n    var pixels = texture.image.data\n    var p = 0\n    for (var j = 0; j < WIDTH; j++) {\n      for (var i = 0; i < WIDTH; i++) {\n        var x = (WIDTH / 2 - i) * 128 / WIDTH\n        var y = (WIDTH / 2 - j) * 128 / WIDTH\n\n        pixels[ p + 0 ] = x\n        pixels[ p + 1 ] = y\n\n        pixels[ p + 2 ] = 0// noise(Math.sin(x), Math.sin(y), 0.0)\n        // pixels[ p + 1 ] = 0\n        // pixels[ p + 2 ] = 0\n        pixels[ p + 3 ] = 0\n        p += 4\n      }\n    }\n  }\n\n  function setupCompute ({ renderer }) {\n    gpuCompute = new GPUComputationRenderer(WIDTH, WIDTH, renderer)\n\n    var positionTexture = gpuCompute.createTexture()\n    fillTexture(positionTexture)\n    positionVariable = gpuCompute.addVariable('positionInfo', particlePositionShader, positionTexture)\n    positionVariable.material.uniforms.mousePos = {\n      value: new THREE.Vector2(0, 0)\n    }\n\n    var velocityTexture = gpuCompute.createTexture()\n    velocityVariable = gpuCompute.addVariable('velocityInfo', particleVelocityShader, velocityTexture)\n    velocityVariable.material.defines.BOUNDS = BOUNDS.toFixed(1)\n    velocityVariable.wrapS = THREE.ClampToEdgeWrapping\n    velocityVariable.wrapT = THREE.ClampToEdgeWrapping\n    velocityVariable.material.uniforms.mousePos = {\n      value: new THREE.Vector2(0, 0)\n    }\n\n    api.setMouse = ({ mX, mY, rect }) => {\n      var posMouse = velocityVariable.material.uniforms.mousePos.value\n      var velMouse = positionVariable.material.uniforms.mousePos.value\n      if (rect && typeof mX !== 'undefined' && typeof mY !== 'undefined') {\n        velMouse.x = ((mX - rect.left) / rect.width) * 2 - 1\n        velMouse.y = -((mY - rect.top) / rect.height) * 2 + 1\n        posMouse.x = ((mX - rect.left) / rect.width) * 2 - 1\n        posMouse.y = -((mY - rect.top) / rect.height) * 2 + 1\n\n        velMouse.y *= rect.width / rect.height\n        posMouse.y *= rect.width / rect.height\n        // console.log(mouse)\n      }\n    }\n\n    gpuCompute.setVariableDependencies(positionVariable, [positionVariable, velocityVariable])\n    gpuCompute.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable])\n\n    var error = gpuCompute.init()\n    if (error !== null) {\n      console.error(error)\n    }\n    return {}\n  }\n  var starLightGeo = (nx = 100, ny = 100) => {\n    var geometry = new THREE.BufferGeometry();\n    var headTailValueVec3 = []\n    var indexValueVec3 = []\n    var randomValueVec3 = []\n    var positionValueVec3 = [\n    ];\n    let uvValueVec2 = [];\n    let numLiunes = nx * ny\n    let n = numLiunes;\n    let tempV3 = new THREE.Vector3(0,0,0);\n    let temp2V3 = new THREE.Vector3(0,0,0);\n    \n    for (var iy = 0; iy < ny; iy++) {\n      for (var ix = 0; ix < nx; ix++) {\n        let i = ix + iy * ny;\n        \n        let xx = ix / nx;\n        let yy = iy / ny;\n        \n        let x1 = 0;\n        let y1 = 0;\n        let z1 = 0;\n        \n        let x2 = 0;\n        let y2 = 0;\n        let z2 = 0;\n        \n        tempV3.set(x2, y2, z2);\n        temp2V3.set(0.0, 0.0, 1.0);\n        tempV3.applyAxisAngle(temp2V3, Math.PI * 2.0 * 60 / 360);\n        \n        x2 = tempV3.x\n        y2 = tempV3.y\n        z2 = tempV3.z\n        \n        let r1x = Math.random()\n        let r1y = Math.random()\n        let r1z = Math.random()\n        let r2x = 0\n        let r2y = 0\n        let r2z = 0\n        \n        let idx = i / n\n        \n        if (i % 2 === 0) {\n          uvValueVec2.push(xx, yy);\n      \n          headTailValueVec3.push(1.0, 1.0, 1.0);\n          indexValueVec3.push(idx, idx, idx);\n          randomValueVec3.push(r1x, r1y, r1z);\n          positionValueVec3.push(x1, y1, z1);\n          \n          uvValueVec2.push(xx, yy);\n        \n          headTailValueVec3.push(0.0, 0.0, 0.0);\n          indexValueVec3.push(idx, idx, idx);\n          randomValueVec3.push(r2x, r2y, r2z);\n          positionValueVec3.push(x2, y2, z2);\n        }\n        \n        // if (i % 2 === 0) {\n        //   uvValueVec2.push(xx, yy);\n        \n        //   headTailValueVec3.push(1.0, 1.0, 1.0);\n        //   indexValueVec3.push(idx, idx, idx);\n        //   randomValueVec3.push(r1x, r1y, r1z);\n        //   positionValueVec3.push(x1, y1, z1);\n          \n          \n        // } else {\n        //   uvValueVec2.push(xx, yy);\n        \n        //   headTailValueVec3.push(0.0, 0.0, 0.0);\n        //   indexValueVec3.push(idx, idx, idx);\n        //   randomValueVec3.push(r2x, r2y, r2z);\n        //   positionValueVec3.push(x2, y2, z2);\n        // }\n      }\n    }\n    \n    \n    \n    geometry.addAttribute('uv', new THREE.BufferAttribute(new Float32Array(uvValueVec2), 2));\n    geometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(positionValueVec3), 3));\n    geometry.addAttribute('randV3', new THREE.BufferAttribute(new Float32Array(randomValueVec3), 3));\n    geometry.addAttribute('idxV3', new THREE.BufferAttribute(new Float32Array(indexValueVec3), 3));\n    geometry.addAttribute('htV3', new THREE.BufferAttribute(new Float32Array(headTailValueVec3), 3));\n    \n    return geometry\n  }\n  \n  function setupScene () {\n    var material = particleShader = new THREE.ShaderMaterial({\n      blending: THREE.AdditiveBlending,\n      depthTest: false,\n      transparent: true,\n      uniforms: {\n        positionInfo: {\n          value: null\n        },\n        velocityInfo: {\n          value: null\n        },\n        mixColor: {\n          value: new THREE.Color(0xffffff)\n        },\n        opacity: {\n          value: 0.14\n        },\n        pointSize: {\n          value: 1.0\n        }\n      },\n      vertexShader: particleVertexShader,\n      fragmentShader: particleFragmentShader // THREE.ShaderChunk[ 'meshphong_frag' ]\n    })\n\n    material.defines.WIDTH = WIDTH.toFixed(1)\n    material.defines.BOUNDS = BOUNDS.toFixed(1)\n\n    var geometry = new THREE.PlaneBufferGeometry(BOUNDS, BOUNDS, WIDTH - 1, WIDTH - 1);\n    \n    geometry = starLightGeo(WIDTH, WIDTH);\n    \n    var points = new THREE.LineSegments(geometry, material);\n    // points = new THREE.Points( geometry, material );\n    // points.rotation.x = -Math.PI / 2 * 0;\n    //points.matrixAutoUpdate = false\n    //points.updateMatrix()\n\n    return {\n      updateColor (v) {\n        material.uniforms.mixColor.value.set(v)\n      },\n      updateOpacity (v) {\n        material.uniforms.opacity.value = v\n      },\n      updatePointSize (v) {\n        material.uniforms.pointSize.value = v\n      },\n      points\n    }\n  }\n\n  function setup ({ renderer }) {\n    setupCompute({ renderer })\n    let scn = setupScene()\n    Object.keys(scn).forEach(kn => {\n      api[kn] = scn[kn]\n    })\n    return api\n  }\n  api.setup = setup\n\n  function render () {\n    // @.@\n    particleShader.uniforms.positionInfo.value = gpuCompute.getCurrentRenderTarget(positionVariable).texture\n    particleShader.uniforms.velocityInfo.value = gpuCompute.getCurrentRenderTarget(velocityVariable).texture\n    gpuCompute.compute()\n  }\n  api.render = render\n\n  return api\n}\n\nResources.ensure(['threejs', 'renderer', 'scene', 'camera', 'gpgpu']).then(() => {\n  let scene = Resources.get('scene');\n  let renderer = Resources.get('renderer');\n  let rootDOM = Resources.get('rootDOM');\n  let camera = Resources.get('camera');\n  \n  let api = particleSea();\n  api.setup({ renderer });\n  \n  let rect = rootDOM.getBoundingClientRect();\n  \n  Input('onTimeline', () => {\n    api.updateColor(getMeta('mixColor'));\n    api.updateOpacity(getMeta('opacity'));\n    api.updatePointSize(getMeta('pointSize'));\n    \n    rect = rootDOM.getBoundingClientRect();\n  }, () => {\n  });\n  \n  rootDOM.addEventListener('mousemove', (evt) => {\n    api.setMouse({ mX: evt.pageX, mY: evt.pageY, rect });\n  }, false);\n  \n  Input('onTimeline', (timeline) => {\n    api.render();\n    OutputAll(timeline)\n  }, () => {\n    setTimeout(() => {\n      scene.add(api.points);\n      //api.points.rotation.y = Math.PI * 0.5;\n      // camera.position.z = 25;\n      // camera.position.y = 75;\n    }, 150)\n  });\n  \n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          "meta": [
            {
              "id": "_r757809391",
              "label": "mixColor",
              "type": "color",
              "value": "#f3fdf8"
            },
            {
              "id": "_r362955315",
              "label": "opacity",
              "type": "range",
              "min": "0",
              "max": "0.1",
              "step": "0.0001",
              "value": 0.0233
            },
            {
              "id": "_r490526344",
              "label": "pointSize",
              "type": "range",
              "min": "0",
              "max": "3",
              "step": "0.01",
              "value": 1
            }
          ],
          "_id": "5c35236d2b601f001738f193",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c34877026d465001733ca9cmodule_223817724340",
          "created_at": "2019-01-08T22:25:49.580Z",
          "updated_at": "2019-01-08T22:25:49.580Z",
          "__v": 0
        },
        {
          "pos": {
            "x": 30,
            "y": 30
          },
          "size": {
            "w": 200,
            "h": 40
          },
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c37ad96d864b90e17193798",
          "name": "Main Loop",
          "bg": "",
          "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  IO,\n  Input,\n  Output,\n  OutputAll\n} = env\n/* esltint-enable */\nconsole.log(`========  ${box.name} is Ready.  ========`)\n// sender\n\nlet startTime = performance.now();\n\nlet rAFID = 0\nlet event = {}\nlet rAF = () => {\n  rAFID = window.requestAnimationFrame(rAF);\n  \n  event.time = performance.now();\n  \n  OutputAll(event);\n}\nrAFID = window.requestAnimationFrame(rAF);\n\nInput('onClock', (evt) => {\n  OutputAll(evt);\n}, () => {\n  // cancenl the loop for the recorder\n  cancelAnimationFrame(rAFID);\n})\n\n// this.onClean = () => {\n//   window.cancelAnimationFrame(rAFID);\n//   console.log(`========  ${box.name} is Cleaned.  ========`)\n// }\n\n",
          "meta": [],
          "_id": "5c37adf1d864b90e1719379f",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c37ad95d864b90e17193769module_608635765892",
          "created_at": "2019-01-10T20:41:21.283Z",
          "updated_at": "2019-01-10T20:41:21.283Z",
          "__v": 0
        },
        {
          "pos": {
            "x": 30,
            "y": 30
          },
          "size": {
            "w": 200,
            "h": 40
          },
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c3526d22b601f001738f1fc",
          "name": "WebGL Render Engine",
          "bg": "",
          "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  // inputs,\n  // outputs,\n  \n  Input,\n  Output\n} = env\n/* esltint-enable */\nconsole.log(`========  ${box.name} is Ready.  ========`)\n\n\nResources.js.need('threejs', [\n\t'https://threejs.org/build/three.min.js',\n  'https://threejs.org/examples/js/controls/OrbitControls.js',\n]);\n\nvar self = this\n\nResources.ensure(['threejs']).then(() => {\n\tvar renderer = new THREE.WebGLRenderer({ preserveDrawingBuffer: true, antialias: true, alpha: true });\n\tvar camera = new THREE.PerspectiveCamera( 75, 1.0, 0.1, 1000 );\n\tvar scene = new THREE.Scene()\n\n\tcamera.position.z = 200;\n\t\n\tvar controls = new THREE.OrbitControls(camera, renderer.domElement);\n\t\n\tvar composer = false\n\tResources.ensure(['composer']).then(() => {\n\t  composer = Resources.get('composer')\n\t});\n  \n  renderer.domElement.style.marginBottom = '-6px';\n  renderer.domElement.style.visibility = 'hidden'\n  \n  Resources.set('scene', scene);\n  Resources.set('renderer', renderer);\n  Resources.set('camera', camera);\n  Resources.get('rootDOM').appendChild(renderer.domElement);\n  \n  Input('onFrame', (v) => {\n    if (scene) {\n      if (composer) {\n        composer.render();\n      } else {\n        renderer.render(scene, camera);\n      }\n    }\n    \n    controls.update()\n    Output('onFrame', v)\n    Output('onScene', scene)\n  })\n  \n  \n  // pass through render signal\n  // Signal.$on(inputs[0].id, (progress) => {\n  //   Signal.$emit(outputs[0].id, progress);\n  //   if (composer) {\n  //     composer.render();\n  //   } else {\n  //     renderer.render(scene, camera);\n  //   }\n  //   controls.update()\n  // });\n  \n  // on resizer\n  var rectCache = {\n    width: 0,\n    height: 0\n  }\n  \n  Input('onResize', (info) => {\n    if (rectCache.width !== info.rect.width || rectCache.height !== info.rect.height) {\n      rectCache.width = info.rect.width\n      rectCache.height = info.rect.height\n      camera.aspect = rectCache.width / rectCache.height;\n    \tcamera.updateProjectionMatrix();\n      renderer.setPixelRatio(window.devicePixelRatio || 1.0);\n      renderer.setSize(rectCache.width, rectCache.height);\n    }\n    renderer.domElement.style.visibility = 'visible';\n    Output('onResize', info);\n  });\n});\n\n// this.onClean = () => {\n//   console.log('onClean', box.id);\n//   Resources.ensure(['renderer']).then(() => {\n//     let renderer = Resources.get('renderer')\n//     Resources.get('rootDOM').removeChild(renderer.domElement)\n//   });\n// }\n",
          "meta": [],
          "_id": "5c42585d61be0d267c5c73fb",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c3526d22b601f001738f1ccmodule_693531521235",
          "created_at": "2019-01-18T22:51:09.846Z",
          "updated_at": "2019-01-18T22:51:09.846Z",
          "__v": 0
        },
        {
          "pos": {
            "x": 30,
            "y": 30
          },
          "size": {
            "w": 200,
            "h": 40
          },
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c40d5b569da031de2a3df3c",
          "name": "Rainbow CSS Background",
          "bg": "",
          "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  IO,\n  Input,\n  Output,\n  OutputAll,\n  getMeta\n} = env\n/* esltint-enable */\nconsole.log('Environment is ready for you!::', box.id)\n\nlet h = {\n  fillBackground: (degree) => {\n    let gradBg = ''\n    gradBg += `linear-gradient(${(degree * 360) % 360}deg, `\n    //gradBg += '    hsl(' + Math.floor(Math.abs(0.5 - degree) * 360)  + ', 50%, 50%), '\n    gradBg += `${getMeta('color')},`\n    gradBg += `${getMeta('color2')}`\n    // gradBg += '    hsl(' + Math.floor(Math.abs(1.25 - degree) * 360)  + ', 50%, 50%) '\n    gradBg += ')'\n\n    Resources.get('rootDOM')\n      .style\n      .background = gradBg\n  }\n}\n\nvar i = 0;\nInput(0, () => {\n  h.fillBackground(i / 100);\n  i++\n  i = i % 100;\n});\n",
          "meta": [
            {
              "id": "_r313732479",
              "label": "color",
              "type": "color",
              "value": "#00ffac"
            },
            {
              "id": "_r852764851",
              "label": "color2",
              "type": "color",
              "value": "#00d8f9"
            }
          ],
          "_id": "5c42831709fbab0ec72c4fa7",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c40d4f969da031de2a3df17module_794457425519",
          "created_at": "2019-01-19T01:53:27.532Z",
          "updated_at": "2019-01-19T01:53:27.532Z",
          "__v": 0
        },
        {
          "pos": {
            "x": 30,
            "y": 30
          },
          "size": {
            "w": 200,
            "h": 40
          },
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c4f7468226b990017249754",
          "name": "Inst Whammy WebM Encoder ",
          "bg": "",
          "src": "/* global env */\n/* eslint-disable */\nlet {\n  Signal,\n  Resources,\n  sockets,\n  box,\n  // inputs,\n  outputs,\n  \n  Input,\n  Output,\n  OutputAll,\n  getMeta\n} = env\n/* esltint-enable */\nconsole.log(`========  ${box.name} is Ready.  ========`)\nwindow.global = window;\n\nResources.js.need('whammy', [\n\t'https://cdn.jsdelivr.net/npm/whammy@0.0.1/whammy.min.js'\n]);\n\n\n\nResources.ensure(['whammy', 'renderer']).then(() => {\n  let encoder = new Whammy.Video(60)\n  let evt = {\n    time: 0,\n    total: getMeta('secondsToRecrod') * 1000,\n    encoder\n  }\n  \n  let canRecord = outputs[0].socket.to !== '' && !!outputs[0].socket.to;\n  \n  \n  let root = Resources.get('rootDOM');\n  \n  function shouldContinue (evt) {\n    return evt.time < evt.total\n  }\n  let span = document.createElement('a')\n  span.style.position = 'fixed';\n  span.style.top = '0px';\n  span.style.left = '0px';\n  span.style.width = '100%';\n  span.style.backgroundColor = 'white';\n  \n  let renderer = Resources.get('renderer');\n  \n  let tout = 0\n  function loop () {\n    Output('onClock', evt)  \n    evt.time += 1000 / 60\n    span.innerHTML = (evt.time / evt.total * 100).toFixed(2) + '% recorded'\n    if (shouldContinue(evt)) {\n      root.appendChild(span);\n      let link = renderer.domElement.toDataURL('image/webp');\n      evt.encoder.add(link)\n      tout = setTimeout(loop, 0)  \n    } else {\n      evt.encoder.compile(false, (webm) => {\n        console.log(webm)\n        let a = document.createElement('a')\n        a.href = URL.createObjectURL(webm)\n        a.download = 'video'\n        a.style.position = 'fixed';\n        a.style.top = '0px';\n        a.style.left = '0px';\n        a.style.width = '100%';\n        a.style.backgroundColor = 'white';\n        a.innerText = 'Donwload'\n        \n        console.log(root);\n        root.appendChild(a)\n      })\n    }\n  }\n  \n  //Resources.set('recordReady', encoder)\n  \n  if (canRecord) {\n    loop()\n  }\n  \n});\n\n// this.onClean = () => {\n//   console.log('onClean', box.id);\n//   Resources.ensure(['renderer']).then(() => {\n//     let renderer = Resources.get('renderer')\n//     Resources.get('rootDOM').removeChild(renderer.domElement)\n//   });\n// }\n",
          "meta": [
            {
              "id": "_r919847076",
              "label": "secondsToRecrod",
              "type": "range",
              "min": "0",
              "max": "15",
              "step": 0.1,
              "value": 15
            }
          ],
          "_id": "5c4f7494226b990017249756",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c4f6e9f226b990017249712module_291302930050",
          "created_at": "2019-01-28T21:31:00.253Z",
          "updated_at": "2019-01-28T21:31:00.253Z",
          "__v": 0
        }
      ],
      "connectors": [
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_75684660185",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_27453514535",
            "to": ""
          },
          "idx": 1546381823618,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2a8f7976169000174511ce",
          "type": "input",
          "modID": "_hive_5c29c764e083af0017f21757module_75684660185",
          "name": "onTimeline",
          "color": "#a8ceff",
          "_id": "5c2be9ff4a54460017ee57c4",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_27453514535",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_75684660185",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_416771796454",
            "to": ""
          },
          "idx": 1546381823621,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2a8f7976169000174511ce",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_75684660185",
          "name": "onTimeline",
          "color": "#a8ceff",
          "_id": "5c2be9ff4a54460017ee57c5",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_416771796454",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_75684660185",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_173129244229",
            "to": ""
          },
          "idx": 1546381823622,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2a8f7976169000174511ce",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_75684660185",
          "name": "uiControl",
          "color": "#ffda00",
          "_id": "5c2be9ff4a54460017ee57c6",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_173129244229",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_998063926878",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_81012179446",
            "to": ""
          },
          "idx": 1546382973297,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21782",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_998063926878",
          "name": "onTimeline3",
          "color": "#a8ceff",
          "_id": "5c2bee7d4a54460017ee582f",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_81012179446",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_615105680269",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_99790552027",
            "to": ""
          },
          "idx": 1546382477540,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2a8f8376169000174511d2",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_615105680269",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c2bec8d4a54460017ee5816",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_99790552027",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_75273206587",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_645880341729",
            "to": ""
          },
          "idx": 1546382455400,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21781",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_75273206587",
          "name": "resize2",
          "color": "#ff7cfa",
          "_id": "5c2bec774a54460017ee5800",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_645880341729",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_745027424560",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_612662920218",
            "to": ""
          },
          "idx": 1546382470374,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21785",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_745027424560",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c2bec864a54460017ee580c",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_612662920218",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_75273206587",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_996465585796",
            "to": ""
          },
          "idx": 1546382455403,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21781",
          "type": "input",
          "modID": "_hive_5c29c764e083af0017f21757module_75273206587",
          "name": "onFrame",
          "color": "#05f1de",
          "_id": "5c2bec774a54460017ee5802",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_996465585796",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_601770780071",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_519663161578",
            "to": ""
          },
          "idx": 1546382464830,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21784",
          "type": "input",
          "modID": "_hive_5c29c764e083af0017f21757module_601770780071",
          "name": "onResize",
          "color": "#ff7cfa",
          "_id": "5c2bec804a54460017ee5805",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_519663161578",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_601770780071",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_334622077167",
            "to": ""
          },
          "idx": 1546382464834,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21784",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_601770780071",
          "name": "onResize",
          "color": "#ff7cfa",
          "_id": "5c2bec804a54460017ee5807",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_334622077167",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_745027424560",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_324063758928",
            "to": ""
          },
          "idx": 1546382470372,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21785",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_745027424560",
          "name": "onFrame",
          "color": "#05f1de",
          "_id": "5c2bec864a54460017ee580b",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_324063758928",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_745027424560",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_523859359836",
            "to": ""
          },
          "idx": 1546382470376,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21785",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_745027424560",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c2bec864a54460017ee580d",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_523859359836",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_998063926878",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_759892384697",
            "to": ""
          },
          "idx": 1546382973305,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21782",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_998063926878",
          "name": "onTimeline7",
          "color": "#a8ceff",
          "_id": "5c2bee7d4a54460017ee5833",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_759892384697",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_745027424560",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_219566954042",
            "to": ""
          },
          "idx": 1546382470379,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21785",
          "type": "input",
          "modID": "_hive_5c29c764e083af0017f21757module_745027424560",
          "name": "onTimeline",
          "color": "#a8ceff",
          "_id": "5c2bec864a54460017ee580f",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_219566954042",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_615105680269",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_978315655837",
            "to": ""
          },
          "idx": 1546382477531,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2a8f8376169000174511d2",
          "type": "input",
          "modID": "_hive_5c29c764e083af0017f21757module_615105680269",
          "name": "onTimeline",
          "color": "#a8ceff",
          "_id": "5c2bec8d4a54460017ee5811",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_978315655837",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_745027424560",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_1002887713637",
            "to": ""
          },
          "idx": 1546382470368,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21785",
          "type": "input",
          "modID": "_hive_5c29c764e083af0017f21757module_745027424560",
          "name": "onFrame",
          "color": "#05f1de",
          "_id": "5c2bec864a54460017ee5809",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_1002887713637",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_998063926878",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_123487416285",
            "to": ""
          },
          "idx": 1546382973299,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21782",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_998063926878",
          "name": "onTimeline4",
          "color": "#a8ceff",
          "_id": "5c2bee7d4a54460017ee5830",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_123487416285",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_615105680269",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_303554106652",
            "to": ""
          },
          "idx": 1546382477536,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2a8f8376169000174511d2",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_615105680269",
          "name": "onTimeline",
          "color": "#a8ceff",
          "_id": "5c2bec8d4a54460017ee5813",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_303554106652",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_998063926878",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_875441463206",
            "to": ""
          },
          "idx": 1546382973294,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21782",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_998063926878",
          "name": "onTimeline1",
          "color": "#a8ceff",
          "_id": "5c2bee7d4a54460017ee582d",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_875441463206",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_998063926878",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_321012926786",
            "to": ""
          },
          "idx": 1546382973301,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21782",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_998063926878",
          "name": "onTimeline5",
          "color": "#a8ceff",
          "_id": "5c2bee7d4a54460017ee5831",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_321012926786",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_745027424560",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_695713574221",
            "to": ""
          },
          "idx": 1546382470377,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21785",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_745027424560",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c2bec864a54460017ee580e",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_695713574221",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_615105680269",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_755527812656",
            "to": ""
          },
          "idx": 1546382477534,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2a8f8376169000174511d2",
          "type": "input",
          "modID": "_hive_5c29c764e083af0017f21757module_615105680269",
          "name": "uiControls",
          "color": "#ffda00",
          "_id": "5c2bec8d4a54460017ee5812",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_755527812656",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_75273206587",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_451527354005",
            "to": ""
          },
          "idx": 1546382455401,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21781",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_75273206587",
          "name": "resize3",
          "color": "#ff7cfa",
          "_id": "5c2bec774a54460017ee5801",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_451527354005",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_998063926878",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_584821513880",
            "to": ""
          },
          "idx": 1546382973306,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21782",
          "type": "input",
          "modID": "_hive_5c29c764e083af0017f21757module_998063926878",
          "name": "onFrame",
          "color": "#05f1de",
          "_id": "5c2bee7d4a54460017ee5834",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_584821513880",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_745027424560",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_995818899006",
            "to": ""
          },
          "idx": 1546382470371,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21785",
          "type": "input",
          "modID": "_hive_5c29c764e083af0017f21757module_745027424560",
          "name": "onResize",
          "color": "#ff7cfa",
          "_id": "5c2bec864a54460017ee580a",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_995818899006",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_601770780071",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_693769435438",
            "to": ""
          },
          "idx": 1546382464827,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21784",
          "type": "input",
          "modID": "_hive_5c29c764e083af0017f21757module_601770780071",
          "name": "onFrame",
          "color": "#00f1de",
          "_id": "5c2bec804a54460017ee5804",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_693769435438",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_998063926878",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_248879527054",
            "to": ""
          },
          "idx": 1546382973296,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21782",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_998063926878",
          "name": "onTimeline2",
          "color": "#a8ceff",
          "_id": "5c2bee7d4a54460017ee582e",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_248879527054",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_75273206587",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_738903359977",
            "to": ""
          },
          "idx": 1546382455398,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21781",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_75273206587",
          "name": "resize1",
          "color": "#ff7cfa",
          "_id": "5c2bec774a54460017ee57ff",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_738903359977",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_601770780071",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_1019523524659",
            "to": ""
          },
          "idx": 1546382464832,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21784",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_601770780071",
          "name": "onFrame",
          "color": "#00f1de",
          "_id": "5c2bec804a54460017ee5806",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_1019523524659",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_615105680269",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_921698012366",
            "to": ""
          },
          "idx": 1546382477541,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2a8f8376169000174511d2",
          "type": "input",
          "modID": "_hive_5c29c764e083af0017f21757module_615105680269",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c2bec8d4a54460017ee5817",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_921698012366",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_998063926878",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_238584382434",
            "to": ""
          },
          "idx": 1546382973303,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21782",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_998063926878",
          "name": "onTimeline6",
          "color": "#a8ceff",
          "_id": "5c2bee7d4a54460017ee5832",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_238584382434",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_615105680269",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_33359812855",
            "to": ""
          },
          "idx": 1546382477539,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2a8f8376169000174511d2",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_615105680269",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c2bec8d4a54460017ee5815",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_33359812855",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_75273206587",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_859459509584",
            "to": ""
          },
          "idx": 1546382455395,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c29c764e083af0017f21781",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_75273206587",
          "name": "onFrame",
          "color": "#05f1de",
          "_id": "5c2bec774a54460017ee57fe",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_859459509584",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c29c764e083af0017f21757module_615105680269",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c29c764e083af0017f21757socket_468455196847",
            "to": ""
          },
          "idx": 1546382477538,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2a8f8376169000174511d2",
          "type": "output",
          "modID": "_hive_5c29c764e083af0017f21757module_615105680269",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c2bec8d4a54460017ee5814",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c29c764e083af0017f21757socket_468455196847",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2bf1674a54460017ee5842module_306298862496",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2bf1674a54460017ee5842socket_677938423842",
            "to": ""
          },
          "idx": 1546392960238,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2bf1674a54460017ee586f",
          "type": "input",
          "modID": "_hive_5c2bf1674a54460017ee5842module_306298862496",
          "name": "onTimeline",
          "color": "#a8ceff",
          "_id": "5c2c1580aee6de001793bf2c",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2bf1674a54460017ee5842socket_677938423842",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2bf1674a54460017ee5842socket_254873398863",
            "to": ""
          },
          "idx": 1546400930296,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2bf1674a54460017ee586c",
          "type": "input",
          "modID": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
          "name": "onFrame",
          "color": "#05f1de",
          "_id": "5c2c34a2efaf8e0017b43a14",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2bf1674a54460017ee5842socket_254873398863",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2bf1674a54460017ee5842module_306298862496",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2bf1674a54460017ee5842socket_638419508312",
            "to": ""
          },
          "idx": 1546392960240,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2bf1674a54460017ee586f",
          "type": "output",
          "modID": "_hive_5c2bf1674a54460017ee5842module_306298862496",
          "name": "onTimeline",
          "color": "#a8ceff",
          "_id": "5c2c1580aee6de001793bf2d",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2bf1674a54460017ee5842socket_638419508312",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2bf1674a54460017ee5842socket_33801279554",
            "to": ""
          },
          "idx": 1546400930288,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2bf1674a54460017ee586c",
          "type": "output",
          "modID": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
          "name": "onTimeline3",
          "color": "#a8ceff",
          "_id": "5c2c34a2efaf8e0017b43a0f",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2bf1674a54460017ee5842socket_33801279554",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2bf1674a54460017ee5842socket_383438085145",
            "to": ""
          },
          "idx": 1546400930289,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2bf1674a54460017ee586c",
          "type": "output",
          "modID": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
          "name": "onTimeline4",
          "color": "#a8ceff",
          "_id": "5c2c34a2efaf8e0017b43a10",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2bf1674a54460017ee5842socket_383438085145",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2bf1674a54460017ee5842socket_530059647969",
            "to": ""
          },
          "idx": 1546400930282,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2bf1674a54460017ee586c",
          "type": "output",
          "modID": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
          "name": "onTimeline1",
          "color": "#a8ceff",
          "_id": "5c2c34a2efaf8e0017b43a0d",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2bf1674a54460017ee5842socket_530059647969",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2bf1674a54460017ee5842socket_199945879640",
            "to": ""
          },
          "idx": 1546400930293,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2bf1674a54460017ee586c",
          "type": "output",
          "modID": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
          "name": "onTimeline6",
          "color": "#a8ceff",
          "_id": "5c2c34a2efaf8e0017b43a12",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2bf1674a54460017ee5842socket_199945879640",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2bf1674a54460017ee5842module_957027991806",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2bf1674a54460017ee5842socket_86253422236",
            "to": ""
          },
          "idx": 1546400286714,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2c181aaee6de001793bf2e",
          "type": "output",
          "modID": "_hive_5c2bf1674a54460017ee5842module_957027991806",
          "name": "onClock",
          "color": "#e9ca38",
          "_id": "5c2c321eefaf8e0017b43a0a",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2bf1674a54460017ee5842socket_86253422236",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2bf1674a54460017ee5842module_957027991806",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2bf1674a54460017ee5842socket_939492560450",
            "to": ""
          },
          "idx": 1546400286716,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2c181aaee6de001793bf2e",
          "type": "input",
          "modID": "_hive_5c2bf1674a54460017ee5842module_957027991806",
          "name": "onStart",
          "color": "#e4e3e5",
          "_id": "5c2c321fefaf8e0017b43a0b",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2bf1674a54460017ee5842socket_939492560450",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2bf1674a54460017ee5842socket_208648917120",
            "to": ""
          },
          "idx": 1546400930285,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2bf1674a54460017ee586c",
          "type": "output",
          "modID": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
          "name": "onTimeline2",
          "color": "#a8ceff",
          "_id": "5c2c34a2efaf8e0017b43a0e",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2bf1674a54460017ee5842socket_208648917120",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2bf1674a54460017ee5842socket_514979943166",
            "to": ""
          },
          "idx": 1546400930292,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2bf1674a54460017ee586c",
          "type": "output",
          "modID": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
          "name": "onTimeline5",
          "color": "#a8ceff",
          "_id": "5c2c34a2efaf8e0017b43a11",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2bf1674a54460017ee5842socket_514979943166",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2bf1674a54460017ee5842socket_700031301423",
            "to": ""
          },
          "idx": 1546400930294,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2bf1674a54460017ee586c",
          "type": "output",
          "modID": "_hive_5c2bf1674a54460017ee5842module_1052875161852",
          "name": "onTimeline7",
          "color": "#a8ceff",
          "_id": "5c2c34a2efaf8e0017b43a13",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2bf1674a54460017ee5842socket_700031301423",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2c4043f5aaf90017377b62module_147401409991",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2c4043f5aaf90017377b62socket_1066409208681",
            "to": ""
          },
          "idx": 1546428436835,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2c4043f5aaf90017377b96",
          "type": "input",
          "modID": "_hive_5c2c4043f5aaf90017377b62module_147401409991",
          "name": "onStart",
          "color": "#e4e3e5",
          "_id": "5c2ca015fed4f60017795c69",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2c4043f5aaf90017377b62socket_1066409208681",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2c4043f5aaf90017377b62module_147401409991",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2c4043f5aaf90017377b62socket_187604180831",
            "to": ""
          },
          "idx": 1546428436832,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2c4043f5aaf90017377b96",
          "type": "output",
          "modID": "_hive_5c2c4043f5aaf90017377b62module_147401409991",
          "name": "onClock",
          "color": "#e9ca38",
          "_id": "5c2ca014fed4f60017795c68",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2c4043f5aaf90017377b62socket_187604180831",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8module_332674900834",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8socket_129020276620",
            "to": ""
          },
          "idx": 1546552236044,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2e730ab5f7ed00178e30ec",
          "type": "output",
          "modID": "_hive_5c2e730ab5f7ed00178e30b8module_332674900834",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c2e83aca2a2ac00177a6140",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2e730ab5f7ed00178e30b8socket_129020276620",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8module_654191274205",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8socket_982739412677",
            "to": ""
          },
          "idx": 1546548171246,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2e730ab5f7ed00178e30eb",
          "type": "output",
          "modID": "_hive_5c2e730ab5f7ed00178e30b8module_654191274205",
          "name": "onTimeline",
          "color": "#a8ceff",
          "_id": "5c2e73cbb5f7ed00178e30f0",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2e730ab5f7ed00178e30b8socket_982739412677",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8module_332674900834",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8socket_8955128244",
            "to": ""
          },
          "idx": 1546552236037,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2e730ab5f7ed00178e30ec",
          "type": "input",
          "modID": "_hive_5c2e730ab5f7ed00178e30b8module_332674900834",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c2e83aca2a2ac00177a613c",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2e730ab5f7ed00178e30b8socket_8955128244",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8module_332674900834",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8socket_517841294434",
            "to": ""
          },
          "idx": 1546552236041,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2e730ab5f7ed00178e30ec",
          "type": "output",
          "modID": "_hive_5c2e730ab5f7ed00178e30b8module_332674900834",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c2e83aca2a2ac00177a613e",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2e730ab5f7ed00178e30b8socket_517841294434",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8module_332674900834",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8socket_176161262759",
            "to": ""
          },
          "idx": 1546552236046,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2e730ab5f7ed00178e30ec",
          "type": "input",
          "modID": "_hive_5c2e730ab5f7ed00178e30b8module_332674900834",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c2e83aca2a2ac00177a6141",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2e730ab5f7ed00178e30b8socket_176161262759",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8module_332674900834",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8socket_1036660437746",
            "to": ""
          },
          "idx": 1546552236043,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2e730ab5f7ed00178e30ec",
          "type": "output",
          "modID": "_hive_5c2e730ab5f7ed00178e30b8module_332674900834",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c2e83aca2a2ac00177a613f",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2e730ab5f7ed00178e30b8socket_1036660437746",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8module_332674900834",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8socket_1033827577408",
            "to": ""
          },
          "idx": 1546552236039,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2e730ab5f7ed00178e30ec",
          "type": "output",
          "modID": "_hive_5c2e730ab5f7ed00178e30b8module_332674900834",
          "name": "onTimeline",
          "color": "#a8ceff",
          "_id": "5c2e83aca2a2ac00177a613d",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2e730ab5f7ed00178e30b8socket_1033827577408",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8module_654191274205",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8socket_182627824422",
            "to": ""
          },
          "idx": 1546548171228,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2e730ab5f7ed00178e30eb",
          "type": "input",
          "modID": "_hive_5c2e730ab5f7ed00178e30b8module_654191274205",
          "name": "onTimeline",
          "color": "#a8ceff",
          "_id": "5c2e73cbb5f7ed00178e30ef",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2e730ab5f7ed00178e30b8socket_182627824422",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8module_332674900834",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8socket_573401134967",
            "to": ""
          },
          "idx": 1546552236035,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2e730ab5f7ed00178e30ec",
          "type": "input",
          "modID": "_hive_5c2e730ab5f7ed00178e30b8module_332674900834",
          "name": "onTimeline",
          "color": "#a8ceff",
          "_id": "5c2e83aca2a2ac00177a613b",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2e730ab5f7ed00178e30b8socket_573401134967",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8module_616629240685",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2e730ab5f7ed00178e30b8socket_610834825200",
            "to": ""
          },
          "idx": 1546669001835,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2e730ab5f7ed00178e30e8",
          "type": "output",
          "modID": "_hive_5c2e730ab5f7ed00178e30b8module_616629240685",
          "name": "onClock",
          "color": "#e9ca38",
          "_id": "5c304bc90596a513ed715077",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2e730ab5f7ed00178e30b8socket_610834825200",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2c4043f5aaf90017377b62module_950943352397",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2c4043f5aaf90017377b62socket_550477945581",
            "to": ""
          },
          "idx": 1546685310202,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2c4043f5aaf90017377b95",
          "type": "output",
          "modID": "_hive_5c2c4043f5aaf90017377b62module_950943352397",
          "name": "onTimeline",
          "color": "#a8ceff",
          "_id": "5c308b7ecd5a5f0f21117276",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2c4043f5aaf90017377b62socket_550477945581",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c2c4043f5aaf90017377b62module_950943352397",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c2c4043f5aaf90017377b62socket_817879814928",
            "to": ""
          },
          "idx": 1546685310199,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c2c4043f5aaf90017377b95",
          "type": "input",
          "modID": "_hive_5c2c4043f5aaf90017377b62module_950943352397",
          "name": "onTimeline",
          "color": "#a8ceff",
          "_id": "5c308b7ecd5a5f0f21117275",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c2c4043f5aaf90017377b62socket_817879814928",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c34877026d465001733ca9cmodule_223817724340",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c34877026d465001733ca9csocket_145251118083",
            "to": ""
          },
          "idx": 1546986349763,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c34877026d465001733cad1",
          "type": "input",
          "modID": "_hive_5c34877026d465001733ca9cmodule_223817724340",
          "name": "onTimeline",
          "color": "#a8ceff",
          "_id": "5c35236d2b601f001738f194",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c34877026d465001733ca9csocket_145251118083",
          "created_at": "2019-01-08T22:25:49.864Z",
          "updated_at": "2019-01-08T22:25:49.864Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c34877026d465001733ca9cmodule_223817724340",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c34877026d465001733ca9csocket_402320691394",
            "to": ""
          },
          "idx": 1546986349767,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c34877026d465001733cad1",
          "type": "output",
          "modID": "_hive_5c34877026d465001733ca9cmodule_223817724340",
          "name": "onTimeline",
          "color": "#a8ceff",
          "_id": "5c35236d2b601f001738f195",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c34877026d465001733ca9csocket_402320691394",
          "created_at": "2019-01-08T22:25:49.886Z",
          "updated_at": "2019-01-08T22:25:49.886Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c37ad95d864b90e17193769module_608635765892",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c37ad95d864b90e17193769socket_432682571310",
            "to": ""
          },
          "idx": 1547152881556,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c37ad96d864b90e17193798",
          "type": "output",
          "modID": "_hive_5c37ad95d864b90e17193769module_608635765892",
          "name": "onFrame",
          "color": "#00f1de",
          "_id": "5c37adf1d864b90e171937a0",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c37ad95d864b90e17193769socket_432682571310",
          "created_at": "2019-01-10T20:41:21.558Z",
          "updated_at": "2019-01-10T20:41:21.558Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c37ad95d864b90e17193769module_608635765892",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c37ad95d864b90e17193769socket_951913996296",
            "to": ""
          },
          "idx": 1547152881560,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c37ad96d864b90e17193798",
          "type": "output",
          "modID": "_hive_5c37ad95d864b90e17193769module_608635765892",
          "name": "onFrame",
          "color": "#00f1de",
          "_id": "5c37adf2d864b90e171937a3",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c37ad95d864b90e17193769socket_951913996296",
          "created_at": "2019-01-10T20:41:22.014Z",
          "updated_at": "2019-01-10T20:41:22.014Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c37ad95d864b90e17193769module_608635765892",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c37ad95d864b90e17193769socket_811060709425",
            "to": ""
          },
          "idx": 1547152881561,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c37ad96d864b90e17193798",
          "type": "output",
          "modID": "_hive_5c37ad95d864b90e17193769module_608635765892",
          "name": "onFrame",
          "color": "#00f1de",
          "_id": "5c37adf2d864b90e171937a4",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c37ad95d864b90e17193769socket_811060709425",
          "created_at": "2019-01-10T20:41:22.015Z",
          "updated_at": "2019-01-10T20:41:22.015Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c37ad95d864b90e17193769module_608635765892",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c37ad95d864b90e17193769socket_298173305401",
            "to": ""
          },
          "idx": 1547152881559,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c37ad96d864b90e17193798",
          "type": "output",
          "modID": "_hive_5c37ad95d864b90e17193769module_608635765892",
          "name": "onFrame",
          "color": "#00f1de",
          "_id": "5c37adf2d864b90e171937a2",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c37ad95d864b90e17193769socket_298173305401",
          "created_at": "2019-01-10T20:41:22.013Z",
          "updated_at": "2019-01-10T20:41:22.013Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c37ad95d864b90e17193769module_608635765892",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c37ad95d864b90e17193769socket_537577535677",
            "to": ""
          },
          "idx": 1547152881563,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c37ad96d864b90e17193798",
          "type": "output",
          "modID": "_hive_5c37ad95d864b90e17193769module_608635765892",
          "name": "onFrame",
          "color": "#00f1de",
          "_id": "5c37adf2d864b90e171937a5",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c37ad95d864b90e17193769socket_537577535677",
          "created_at": "2019-01-10T20:41:22.018Z",
          "updated_at": "2019-01-10T20:41:22.018Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c37ad95d864b90e17193769module_608635765892",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c37ad95d864b90e17193769socket_999877641099",
            "to": ""
          },
          "idx": 1547152881558,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c37ad96d864b90e17193798",
          "type": "output",
          "modID": "_hive_5c37ad95d864b90e17193769module_608635765892",
          "name": "onFrame",
          "color": "#00f1de",
          "_id": "5c37adf2d864b90e171937a1",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c37ad95d864b90e17193769socket_999877641099",
          "created_at": "2019-01-10T20:41:22.011Z",
          "updated_at": "2019-01-10T20:41:22.011Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c37ad95d864b90e17193769module_608635765892",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c37ad95d864b90e17193769socket_966742041419",
            "to": ""
          },
          "idx": 1547152881565,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c37ad96d864b90e17193798",
          "type": "input",
          "modID": "_hive_5c37ad95d864b90e17193769module_608635765892",
          "name": "onClock",
          "color": "#eaca38",
          "_id": "5c37adf2d864b90e171937a7",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c37ad95d864b90e17193769socket_966742041419",
          "created_at": "2019-01-10T20:41:22.023Z",
          "updated_at": "2019-01-10T20:41:22.023Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c37ad95d864b90e17193769module_608635765892",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c37ad95d864b90e17193769socket_1020478642380",
            "to": ""
          },
          "idx": 1547152881564,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c37ad96d864b90e17193798",
          "type": "output",
          "modID": "_hive_5c37ad95d864b90e17193769module_608635765892",
          "name": "onFrame",
          "color": "#00f1de",
          "_id": "5c37adf2d864b90e171937a6",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c37ad95d864b90e17193769socket_1020478642380",
          "created_at": "2019-01-10T20:41:22.022Z",
          "updated_at": "2019-01-10T20:41:22.022Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c3526d22b601f001738f1ccmodule_693531521235",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c3526d22b601f001738f1ccsocket_557351884560",
            "to": ""
          },
          "idx": 1547851870081,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c3526d22b601f001738f1fc",
          "type": "input",
          "modID": "_hive_5c3526d22b601f001738f1ccmodule_693531521235",
          "name": "onFrame",
          "color": "#00f1de",
          "_id": "5c42585e61be0d267c5c73fc",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c3526d22b601f001738f1ccsocket_557351884560",
          "created_at": "2019-01-18T22:51:10.077Z",
          "updated_at": "2019-01-18T22:51:10.077Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c3526d22b601f001738f1ccmodule_693531521235",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c3526d22b601f001738f1ccsocket_676566235766",
            "to": ""
          },
          "idx": 1547851870082,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c3526d22b601f001738f1fc",
          "type": "input",
          "modID": "_hive_5c3526d22b601f001738f1ccmodule_693531521235",
          "name": "onResize",
          "color": "#ff7cfa",
          "_id": "5c42585e61be0d267c5c73fd",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c3526d22b601f001738f1ccsocket_676566235766",
          "created_at": "2019-01-18T22:51:10.079Z",
          "updated_at": "2019-01-18T22:51:10.079Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c3526d22b601f001738f1ccmodule_693531521235",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c3526d22b601f001738f1ccsocket_923702591480",
            "to": ""
          },
          "idx": 1547851870084,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c3526d22b601f001738f1fc",
          "type": "output",
          "modID": "_hive_5c3526d22b601f001738f1ccmodule_693531521235",
          "name": "onResize",
          "color": "#ff7cfa",
          "_id": "5c42585e61be0d267c5c73ff",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c3526d22b601f001738f1ccsocket_923702591480",
          "created_at": "2019-01-18T22:51:10.084Z",
          "updated_at": "2019-01-18T22:51:10.084Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c3526d22b601f001738f1ccmodule_693531521235",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c3526d22b601f001738f1ccsocket_229465412191",
            "to": ""
          },
          "idx": 1547851870083,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c3526d22b601f001738f1fc",
          "type": "output",
          "modID": "_hive_5c3526d22b601f001738f1ccmodule_693531521235",
          "name": "onFrame",
          "color": "#00f1de",
          "_id": "5c42585e61be0d267c5c73fe",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c3526d22b601f001738f1ccsocket_229465412191",
          "created_at": "2019-01-18T22:51:10.082Z",
          "updated_at": "2019-01-18T22:51:10.082Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c40d4f969da031de2a3df17module_794457425519",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c40d4f969da031de2a3df17socket_937448995212",
            "to": ""
          },
          "idx": 1547862807853,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c40d5b569da031de2a3df3c",
          "type": "input",
          "modID": "_hive_5c40d4f969da031de2a3df17module_794457425519",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c42831709fbab0ec72c4fa8",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c40d4f969da031de2a3df17socket_937448995212",
          "created_at": "2019-01-19T01:53:27.856Z",
          "updated_at": "2019-01-19T01:53:27.856Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c40d4f969da031de2a3df17module_794457425519",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c40d4f969da031de2a3df17socket_706467872897",
            "to": ""
          },
          "idx": 1547862807855,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c40d5b569da031de2a3df3c",
          "type": "input",
          "modID": "_hive_5c40d4f969da031de2a3df17module_794457425519",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c42831709fbab0ec72c4fa9",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c40d4f969da031de2a3df17socket_706467872897",
          "created_at": "2019-01-19T01:53:27.865Z",
          "updated_at": "2019-01-19T01:53:27.865Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c40d4f969da031de2a3df17module_794457425519",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c40d4f969da031de2a3df17socket_586583895383",
            "to": ""
          },
          "idx": 1547862807857,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c40d5b569da031de2a3df3c",
          "type": "input",
          "modID": "_hive_5c40d4f969da031de2a3df17module_794457425519",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c42831709fbab0ec72c4faa",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c40d4f969da031de2a3df17socket_586583895383",
          "created_at": "2019-01-19T01:53:27.869Z",
          "updated_at": "2019-01-19T01:53:27.869Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c40d4f969da031de2a3df17module_794457425519",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c40d4f969da031de2a3df17socket_674479069285",
            "to": ""
          },
          "idx": 1547862807859,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c40d5b569da031de2a3df3c",
          "type": "output",
          "modID": "_hive_5c40d4f969da031de2a3df17module_794457425519",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c42831709fbab0ec72c4fac",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c40d4f969da031de2a3df17socket_674479069285",
          "created_at": "2019-01-19T01:53:27.875Z",
          "updated_at": "2019-01-19T01:53:27.875Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c40d4f969da031de2a3df17module_794457425519",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c40d4f969da031de2a3df17socket_1072325700233",
            "to": ""
          },
          "idx": 1547862807858,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c40d5b569da031de2a3df3c",
          "type": "input",
          "modID": "_hive_5c40d4f969da031de2a3df17module_794457425519",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c42831709fbab0ec72c4fab",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c40d4f969da031de2a3df17socket_1072325700233",
          "created_at": "2019-01-19T01:53:27.872Z",
          "updated_at": "2019-01-19T01:53:27.872Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c40d4f969da031de2a3df17module_794457425519",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c40d4f969da031de2a3df17socket_150219820209",
            "to": ""
          },
          "idx": 1547862807860,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c40d5b569da031de2a3df3c",
          "type": "output",
          "modID": "_hive_5c40d4f969da031de2a3df17module_794457425519",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c42831709fbab0ec72c4fad",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c40d4f969da031de2a3df17socket_150219820209",
          "created_at": "2019-01-19T01:53:27.878Z",
          "updated_at": "2019-01-19T01:53:27.878Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c40d4f969da031de2a3df17module_794457425519",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c40d4f969da031de2a3df17socket_303024987482",
            "to": ""
          },
          "idx": 1547862807862,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c40d5b569da031de2a3df3c",
          "type": "output",
          "modID": "_hive_5c40d4f969da031de2a3df17module_794457425519",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c42831709fbab0ec72c4faf",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c40d4f969da031de2a3df17socket_303024987482",
          "created_at": "2019-01-19T01:53:27.883Z",
          "updated_at": "2019-01-19T01:53:27.883Z",
          "__v": 0
        },
        {
          "mod": {
            "from": "_hive_5c40d4f969da031de2a3df17module_794457425519",
            "to": ""
          },
          "socket": {
            "from": "_hive_5c40d4f969da031de2a3df17socket_321473473110",
            "to": ""
          },
          "idx": 1547862807861,
          "isTemplate": true,
          "isGallery": false,
          "oldID": "5c40d5b569da031de2a3df3c",
          "type": "output",
          "modID": "_hive_5c40d4f969da031de2a3df17module_794457425519",
          "name": "my socket",
          "color": "#e4e3e5",
          "_id": "5c42831709fbab0ec72c4fae",
          "userID": "5c1daecd6168c20017eec65e",
          "projectID": "template",
          "id": "_hive_5c40d4f969da031de2a3df17socket_321473473110",
          "created_at": "2019-01-19T01:53:27.880Z",
          "updated_at": "2019-01-19T01:53:27.880Z",
          "__v": 0
        }
      ]
    }
  },
  "versions": [],
  "sessionID": "_0gpn6byej",
  "projectID": "_0gpn6byej",
  "userID": "_0gpn6byej"
}